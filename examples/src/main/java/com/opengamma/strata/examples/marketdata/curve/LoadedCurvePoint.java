/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.strata.examples.marketdata.curve;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;

import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.Bean;
import org.joda.beans.impl.direct.DirectMetaProperty;

/**
 * Represents a point on a calibrated curve.
 */
@BeanDefinition
public class LoadedCurvePoint
    implements Comparable<LoadedCurvePoint>, ImmutableBean {

  /** The point date. */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate pointDate;

  /** The point value. */
  @PropertyDefinition
  private final double pointValue;

  /** The curve node label. */
  @PropertyDefinition(validate = "notNull")
  private final String label;

  public static LoadedCurvePoint of(LocalDate pointDate, double pointValue, String label) {
    return builder()
        .pointDate(pointDate)
        .pointValue(pointValue)
        .label(label)
        .build();
  }

  //-------------------------------------------------------------------------
  @Override
  public int compareTo(LoadedCurvePoint p) {
    return getPointDate().compareTo(p.getPointDate());
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code LoadedCurvePoint}.
   * @return the meta-bean, not null
   */
  public static LoadedCurvePoint.Meta meta() {
    return LoadedCurvePoint.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(LoadedCurvePoint.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static LoadedCurvePoint.Builder builder() {
    return new LoadedCurvePoint.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected LoadedCurvePoint(LoadedCurvePoint.Builder builder) {
    JodaBeanUtils.notNull(builder.pointDate, "pointDate");
    JodaBeanUtils.notNull(builder.label, "label");
    this.pointDate = builder.pointDate;
    this.pointValue = builder.pointValue;
    this.label = builder.label;
  }

  @Override
  public LoadedCurvePoint.Meta metaBean() {
    return LoadedCurvePoint.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the point date.
   * @return the value of the property, not null
   */
  public LocalDate getPointDate() {
    return pointDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the point value.
   * @return the value of the property
   */
  public double getPointValue() {
    return pointValue;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the curve node label.
   * @return the value of the property, not null
   */
  public String getLabel() {
    return label;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      LoadedCurvePoint other = (LoadedCurvePoint) obj;
      return JodaBeanUtils.equal(getPointDate(), other.getPointDate()) &&
          JodaBeanUtils.equal(getPointValue(), other.getPointValue()) &&
          JodaBeanUtils.equal(getLabel(), other.getLabel());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getPointDate());
    hash = hash * 31 + JodaBeanUtils.hashCode(getPointValue());
    hash = hash * 31 + JodaBeanUtils.hashCode(getLabel());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("LoadedCurvePoint{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("pointDate").append('=').append(JodaBeanUtils.toString(getPointDate())).append(',').append(' ');
    buf.append("pointValue").append('=').append(JodaBeanUtils.toString(getPointValue())).append(',').append(' ');
    buf.append("label").append('=').append(JodaBeanUtils.toString(getLabel())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code LoadedCurvePoint}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code pointDate} property.
     */
    private final MetaProperty<LocalDate> pointDate = DirectMetaProperty.ofImmutable(
        this, "pointDate", LoadedCurvePoint.class, LocalDate.class);
    /**
     * The meta-property for the {@code pointValue} property.
     */
    private final MetaProperty<Double> pointValue = DirectMetaProperty.ofImmutable(
        this, "pointValue", LoadedCurvePoint.class, Double.TYPE);
    /**
     * The meta-property for the {@code label} property.
     */
    private final MetaProperty<String> label = DirectMetaProperty.ofImmutable(
        this, "label", LoadedCurvePoint.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "pointDate",
        "pointValue",
        "label");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1564045662:  // pointDate
          return pointDate;
        case 1257391553:  // pointValue
          return pointValue;
        case 102727412:  // label
          return label;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public LoadedCurvePoint.Builder builder() {
      return new LoadedCurvePoint.Builder();
    }

    @Override
    public Class<? extends LoadedCurvePoint> beanType() {
      return LoadedCurvePoint.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code pointDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> pointDate() {
      return pointDate;
    }

    /**
     * The meta-property for the {@code pointValue} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Double> pointValue() {
      return pointValue;
    }

    /**
     * The meta-property for the {@code label} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> label() {
      return label;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1564045662:  // pointDate
          return ((LoadedCurvePoint) bean).getPointDate();
        case 1257391553:  // pointValue
          return ((LoadedCurvePoint) bean).getPointValue();
        case 102727412:  // label
          return ((LoadedCurvePoint) bean).getLabel();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code LoadedCurvePoint}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<LoadedCurvePoint> {

    private LocalDate pointDate;
    private double pointValue;
    private String label;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(LoadedCurvePoint beanToCopy) {
      this.pointDate = beanToCopy.getPointDate();
      this.pointValue = beanToCopy.getPointValue();
      this.label = beanToCopy.getLabel();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1564045662:  // pointDate
          return pointDate;
        case 1257391553:  // pointValue
          return pointValue;
        case 102727412:  // label
          return label;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1564045662:  // pointDate
          this.pointDate = (LocalDate) newValue;
          break;
        case 1257391553:  // pointValue
          this.pointValue = (Double) newValue;
          break;
        case 102727412:  // label
          this.label = (String) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public LoadedCurvePoint build() {
      return new LoadedCurvePoint(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code pointDate} property in the builder.
     * @param pointDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder pointDate(LocalDate pointDate) {
      JodaBeanUtils.notNull(pointDate, "pointDate");
      this.pointDate = pointDate;
      return this;
    }

    /**
     * Sets the {@code pointValue} property in the builder.
     * @param pointValue  the new value
     * @return this, for chaining, not null
     */
    public Builder pointValue(double pointValue) {
      this.pointValue = pointValue;
      return this;
    }

    /**
     * Sets the {@code label} property in the builder.
     * @param label  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder label(String label) {
      JodaBeanUtils.notNull(label, "label");
      this.label = label;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("LoadedCurvePoint.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("pointDate").append('=').append(JodaBeanUtils.toString(pointDate)).append(',').append(' ');
      buf.append("pointValue").append('=').append(JodaBeanUtils.toString(pointValue)).append(',').append(' ');
      buf.append("label").append('=').append(JodaBeanUtils.toString(label)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
