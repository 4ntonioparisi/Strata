/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.strata.examples.marketdata;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;
import com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;
import com.opengamma.analytics.math.interpolation.CombinedInterpolatorExtrapolator;
import com.opengamma.analytics.math.interpolation.CombinedInterpolatorExtrapolatorFactory;
import com.opengamma.analytics.math.interpolation.Interpolator1DFactory;

/**
 * Provides a calibrated curve in a simple, serializable form for use with example data.
 */
@BeanDefinition
public final class InterpolatedCurve implements ImmutableBean {

  /**
   * The array of year fractions, one for each point.
   */
  @PropertyDefinition(validate = "notNull")
  private final double[] yearFractions;
  /**
   * The array of rates, one for each point.
   */
  @PropertyDefinition(validate = "notNull")
  private final double[] rates;
  /**
   * The name of the interpolator.
   */
  @PropertyDefinition(validate = "notNull")
  private final String interpolatorName;

  /**
   * Converts this curve into the analytics yield curve representation, specifying
   * flat extrapolation.
   * 
   * @return the yield curve
   */
  public YieldCurve toYieldCurve() {
    CombinedInterpolatorExtrapolator interpolatorExtrapolator = CombinedInterpolatorExtrapolatorFactory.getInterpolator(
        getInterpolatorName(),
        Interpolator1DFactory.FLAT_EXTRAPOLATOR,
        Interpolator1DFactory.FLAT_EXTRAPOLATOR);
    InterpolatedDoublesCurve doublesCurve = InterpolatedDoublesCurve.from(
        getYearFractions(),
        getRates(),
        interpolatorExtrapolator);
    return YieldCurve.from(doublesCurve);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code InterpolatedCurve}.
   * @return the meta-bean, not null
   */
  public static InterpolatedCurve.Meta meta() {
    return InterpolatedCurve.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(InterpolatedCurve.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static InterpolatedCurve.Builder builder() {
    return new InterpolatedCurve.Builder();
  }

  private InterpolatedCurve(
      double[] yearFractions,
      double[] rates,
      String interpolatorName) {
    JodaBeanUtils.notNull(yearFractions, "yearFractions");
    JodaBeanUtils.notNull(rates, "rates");
    JodaBeanUtils.notNull(interpolatorName, "interpolatorName");
    this.yearFractions = yearFractions.clone();
    this.rates = rates.clone();
    this.interpolatorName = interpolatorName;
  }

  @Override
  public InterpolatedCurve.Meta metaBean() {
    return InterpolatedCurve.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the array of year fractions, one for each point.
   * @return the value of the property, not null
   */
  public double[] getYearFractions() {
    return (yearFractions != null ? yearFractions.clone() : null);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the array of rates, one for each point.
   * @return the value of the property, not null
   */
  public double[] getRates() {
    return (rates != null ? rates.clone() : null);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name of the interpolator.
   * @return the value of the property, not null
   */
  public String getInterpolatorName() {
    return interpolatorName;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      InterpolatedCurve other = (InterpolatedCurve) obj;
      return JodaBeanUtils.equal(getYearFractions(), other.getYearFractions()) &&
          JodaBeanUtils.equal(getRates(), other.getRates()) &&
          JodaBeanUtils.equal(getInterpolatorName(), other.getInterpolatorName());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getYearFractions());
    hash = hash * 31 + JodaBeanUtils.hashCode(getRates());
    hash = hash * 31 + JodaBeanUtils.hashCode(getInterpolatorName());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("InterpolatedCurve{");
    buf.append("yearFractions").append('=').append(getYearFractions()).append(',').append(' ');
    buf.append("rates").append('=').append(getRates()).append(',').append(' ');
    buf.append("interpolatorName").append('=').append(JodaBeanUtils.toString(getInterpolatorName()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code InterpolatedCurve}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code yearFractions} property.
     */
    private final MetaProperty<double[]> yearFractions = DirectMetaProperty.ofImmutable(
        this, "yearFractions", InterpolatedCurve.class, double[].class);
    /**
     * The meta-property for the {@code rates} property.
     */
    private final MetaProperty<double[]> rates = DirectMetaProperty.ofImmutable(
        this, "rates", InterpolatedCurve.class, double[].class);
    /**
     * The meta-property for the {@code interpolatorName} property.
     */
    private final MetaProperty<String> interpolatorName = DirectMetaProperty.ofImmutable(
        this, "interpolatorName", InterpolatedCurve.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "yearFractions",
        "rates",
        "interpolatorName");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -2145580300:  // yearFractions
          return yearFractions;
        case 108285843:  // rates
          return rates;
        case -1247314958:  // interpolatorName
          return interpolatorName;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public InterpolatedCurve.Builder builder() {
      return new InterpolatedCurve.Builder();
    }

    @Override
    public Class<? extends InterpolatedCurve> beanType() {
      return InterpolatedCurve.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code yearFractions} property.
     * @return the meta-property, not null
     */
    public MetaProperty<double[]> yearFractions() {
      return yearFractions;
    }

    /**
     * The meta-property for the {@code rates} property.
     * @return the meta-property, not null
     */
    public MetaProperty<double[]> rates() {
      return rates;
    }

    /**
     * The meta-property for the {@code interpolatorName} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> interpolatorName() {
      return interpolatorName;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -2145580300:  // yearFractions
          return ((InterpolatedCurve) bean).getYearFractions();
        case 108285843:  // rates
          return ((InterpolatedCurve) bean).getRates();
        case -1247314958:  // interpolatorName
          return ((InterpolatedCurve) bean).getInterpolatorName();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code InterpolatedCurve}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<InterpolatedCurve> {

    private double[] yearFractions;
    private double[] rates;
    private String interpolatorName;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(InterpolatedCurve beanToCopy) {
      this.yearFractions = beanToCopy.getYearFractions().clone();
      this.rates = beanToCopy.getRates().clone();
      this.interpolatorName = beanToCopy.getInterpolatorName();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -2145580300:  // yearFractions
          return yearFractions;
        case 108285843:  // rates
          return rates;
        case -1247314958:  // interpolatorName
          return interpolatorName;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -2145580300:  // yearFractions
          this.yearFractions = (double[]) newValue;
          break;
        case 108285843:  // rates
          this.rates = (double[]) newValue;
          break;
        case -1247314958:  // interpolatorName
          this.interpolatorName = (String) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public InterpolatedCurve build() {
      return new InterpolatedCurve(
          yearFractions,
          rates,
          interpolatorName);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code yearFractions} property in the builder.
     * @param yearFractions  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder yearFractions(double... yearFractions) {
      JodaBeanUtils.notNull(yearFractions, "yearFractions");
      this.yearFractions = yearFractions;
      return this;
    }

    /**
     * Sets the {@code rates} property in the builder.
     * @param rates  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder rates(double... rates) {
      JodaBeanUtils.notNull(rates, "rates");
      this.rates = rates;
      return this;
    }

    /**
     * Sets the {@code interpolatorName} property in the builder.
     * @param interpolatorName  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder interpolatorName(String interpolatorName) {
      JodaBeanUtils.notNull(interpolatorName, "interpolatorName");
      this.interpolatorName = interpolatorName;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("InterpolatedCurve.Builder{");
      buf.append("yearFractions").append('=').append(JodaBeanUtils.toString(yearFractions)).append(',').append(' ');
      buf.append("rates").append('=').append(JodaBeanUtils.toString(rates)).append(',').append(' ');
      buf.append("interpolatorName").append('=').append(JodaBeanUtils.toString(interpolatorName));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
