/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 * <p>
 * Please see distribution for license.
 */
package com.opengamma.strata.examples.finance;

import com.opengamma.strata.finance.credit.type.IsdaYieldCurveConvention;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableValidator;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.time.Period;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

/**
 * This class is immutable and thread-safe.
 */
@BeanDefinition(builderScope = "private")
public final class IsdaYieldCurveParRates
    implements ImmutableBean, Serializable {

  @PropertyDefinition(validate = "notNull")
  private final Period[] _yieldCurvePoints;

  @PropertyDefinition(validate = "notNull")
  private final IsdaYieldCurveUnderlyingType[] _yieldCurveInstruments;

  @PropertyDefinition(validate = "notNull")
  private final double[] _parRates;

  @PropertyDefinition(validate = "notNull")
  private final IsdaYieldCurveConvention _curveConvention;

  public static IsdaYieldCurveParRates of(
      Period[] yieldCurvePoints,
      IsdaYieldCurveUnderlyingType[] yieldCurveInstruments,
      double[] parRates,
      IsdaYieldCurveConvention curveConvention
  ) {
    return new IsdaYieldCurveParRates(
        yieldCurvePoints,
        yieldCurveInstruments,
        parRates,
        curveConvention
    );
  }

  //-------------------------------------------------------------------------
  @ImmutableValidator
  private void validate() {
    if (_yieldCurvePoints.length <= 0) {
      throw new IllegalArgumentException("Cannot have zero points");
    }
    if (_yieldCurvePoints.length != _yieldCurveInstruments.length || _yieldCurvePoints.length != _parRates.length) {
      throw new IllegalArgumentException("points do not line up");
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IsdaYieldCurveParRates}.
   * @return the meta-bean, not null
   */
  public static IsdaYieldCurveParRates.Meta meta() {
    return IsdaYieldCurveParRates.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IsdaYieldCurveParRates.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private IsdaYieldCurveParRates(
      Period[] _yieldCurvePoints,
      IsdaYieldCurveUnderlyingType[] _yieldCurveInstruments,
      double[] _parRates,
      IsdaYieldCurveConvention _curveConvention) {
    JodaBeanUtils.notNull(_yieldCurvePoints, "_yieldCurvePoints");
    JodaBeanUtils.notNull(_yieldCurveInstruments, "_yieldCurveInstruments");
    JodaBeanUtils.notNull(_parRates, "_parRates");
    JodaBeanUtils.notNull(_curveConvention, "_curveConvention");
    this._yieldCurvePoints = _yieldCurvePoints;
    this._yieldCurveInstruments = _yieldCurveInstruments;
    this._parRates = _parRates.clone();
    this._curveConvention = _curveConvention;
    validate();
  }

  @Override
  public IsdaYieldCurveParRates.Meta metaBean() {
    return IsdaYieldCurveParRates.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the _yieldCurvePoints.
   * @return the value of the property, not null
   */
  public Period[] get_yieldCurvePoints() {
    return _yieldCurvePoints;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the _yieldCurveInstruments.
   * @return the value of the property, not null
   */
  public IsdaYieldCurveUnderlyingType[] get_yieldCurveInstruments() {
    return _yieldCurveInstruments;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the _parRates.
   * @return the value of the property, not null
   */
  public double[] get_parRates() {
    return (_parRates != null ? _parRates.clone() : null);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the _curveConvention.
   * @return the value of the property, not null
   */
  public IsdaYieldCurveConvention get_curveConvention() {
    return _curveConvention;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IsdaYieldCurveParRates other = (IsdaYieldCurveParRates) obj;
      return JodaBeanUtils.equal(get_yieldCurvePoints(), other.get_yieldCurvePoints()) &&
          JodaBeanUtils.equal(get_yieldCurveInstruments(), other.get_yieldCurveInstruments()) &&
          JodaBeanUtils.equal(get_parRates(), other.get_parRates()) &&
          JodaBeanUtils.equal(get_curveConvention(), other.get_curveConvention());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(get_yieldCurvePoints());
    hash = hash * 31 + JodaBeanUtils.hashCode(get_yieldCurveInstruments());
    hash = hash * 31 + JodaBeanUtils.hashCode(get_parRates());
    hash = hash * 31 + JodaBeanUtils.hashCode(get_curveConvention());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("IsdaYieldCurveParRates{");
    buf.append("_yieldCurvePoints").append('=').append(get_yieldCurvePoints()).append(',').append(' ');
    buf.append("_yieldCurveInstruments").append('=').append(get_yieldCurveInstruments()).append(',').append(' ');
    buf.append("_parRates").append('=').append(get_parRates()).append(',').append(' ');
    buf.append("_curveConvention").append('=').append(JodaBeanUtils.toString(get_curveConvention()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IsdaYieldCurveParRates}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code _yieldCurvePoints} property.
     */
    private final MetaProperty<Period[]> _yieldCurvePoints = DirectMetaProperty.ofImmutable(
        this, "_yieldCurvePoints", IsdaYieldCurveParRates.class, Period[].class);
    /**
     * The meta-property for the {@code _yieldCurveInstruments} property.
     */
    private final MetaProperty<IsdaYieldCurveUnderlyingType[]> _yieldCurveInstruments = DirectMetaProperty.ofImmutable(
        this, "_yieldCurveInstruments", IsdaYieldCurveParRates.class, IsdaYieldCurveUnderlyingType[].class);
    /**
     * The meta-property for the {@code _parRates} property.
     */
    private final MetaProperty<double[]> _parRates = DirectMetaProperty.ofImmutable(
        this, "_parRates", IsdaYieldCurveParRates.class, double[].class);
    /**
     * The meta-property for the {@code _curveConvention} property.
     */
    private final MetaProperty<IsdaYieldCurveConvention> _curveConvention = DirectMetaProperty.ofImmutable(
        this, "_curveConvention", IsdaYieldCurveParRates.class, IsdaYieldCurveConvention.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "_yieldCurvePoints",
        "_yieldCurveInstruments",
        "_parRates",
        "_curveConvention");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 410778436:  // _yieldCurvePoints
          return _yieldCurvePoints;
        case -1811394645:  // _yieldCurveInstruments
          return _yieldCurveInstruments;
        case 1247747281:  // _parRates
          return _parRates;
        case 540110721:  // _curveConvention
          return _curveConvention;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends IsdaYieldCurveParRates> builder() {
      return new IsdaYieldCurveParRates.Builder();
    }

    @Override
    public Class<? extends IsdaYieldCurveParRates> beanType() {
      return IsdaYieldCurveParRates.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code _yieldCurvePoints} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Period[]> _yieldCurvePoints() {
      return _yieldCurvePoints;
    }

    /**
     * The meta-property for the {@code _yieldCurveInstruments} property.
     * @return the meta-property, not null
     */
    public MetaProperty<IsdaYieldCurveUnderlyingType[]> _yieldCurveInstruments() {
      return _yieldCurveInstruments;
    }

    /**
     * The meta-property for the {@code _parRates} property.
     * @return the meta-property, not null
     */
    public MetaProperty<double[]> _parRates() {
      return _parRates;
    }

    /**
     * The meta-property for the {@code _curveConvention} property.
     * @return the meta-property, not null
     */
    public MetaProperty<IsdaYieldCurveConvention> _curveConvention() {
      return _curveConvention;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 410778436:  // _yieldCurvePoints
          return ((IsdaYieldCurveParRates) bean).get_yieldCurvePoints();
        case -1811394645:  // _yieldCurveInstruments
          return ((IsdaYieldCurveParRates) bean).get_yieldCurveInstruments();
        case 1247747281:  // _parRates
          return ((IsdaYieldCurveParRates) bean).get_parRates();
        case 540110721:  // _curveConvention
          return ((IsdaYieldCurveParRates) bean).get_curveConvention();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code IsdaYieldCurveParRates}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<IsdaYieldCurveParRates> {

    private Period[] _yieldCurvePoints;
    private IsdaYieldCurveUnderlyingType[] _yieldCurveInstruments;
    private double[] _parRates;
    private IsdaYieldCurveConvention _curveConvention;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 410778436:  // _yieldCurvePoints
          return _yieldCurvePoints;
        case -1811394645:  // _yieldCurveInstruments
          return _yieldCurveInstruments;
        case 1247747281:  // _parRates
          return _parRates;
        case 540110721:  // _curveConvention
          return _curveConvention;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 410778436:  // _yieldCurvePoints
          this._yieldCurvePoints = (Period[]) newValue;
          break;
        case -1811394645:  // _yieldCurveInstruments
          this._yieldCurveInstruments = (IsdaYieldCurveUnderlyingType[]) newValue;
          break;
        case 1247747281:  // _parRates
          this._parRates = (double[]) newValue;
          break;
        case 540110721:  // _curveConvention
          this._curveConvention = (IsdaYieldCurveConvention) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public IsdaYieldCurveParRates build() {
      return new IsdaYieldCurveParRates(
          _yieldCurvePoints,
          _yieldCurveInstruments,
          _parRates,
          _curveConvention);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("IsdaYieldCurveParRates.Builder{");
      buf.append("_yieldCurvePoints").append('=').append(JodaBeanUtils.toString(_yieldCurvePoints)).append(',').append(' ');
      buf.append("_yieldCurveInstruments").append('=').append(JodaBeanUtils.toString(_yieldCurveInstruments)).append(',').append(' ');
      buf.append("_parRates").append('=').append(JodaBeanUtils.toString(_parRates)).append(',').append(' ');
      buf.append("_curveConvention").append('=').append(JodaBeanUtils.toString(_curveConvention));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
