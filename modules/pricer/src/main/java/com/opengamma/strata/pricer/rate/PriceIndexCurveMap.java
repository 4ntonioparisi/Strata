package com.opengamma.strata.pricer.rate;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableMap;
import com.opengamma.analytics.financial.model.interestrate.curve.PriceIndexCurve;
import com.opengamma.strata.basics.index.PriceIndex;

/**
 * Wrapper of an immutable map of price indexes and price index curves. 
 * <p>
 * This is intended to be used as an element of additionalData in {@link ImmutableRatesProvider}.
 */
@BeanDefinition
public class PriceIndexCurveMap implements ImmutableBean, Serializable {

  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<PriceIndex, PriceIndexCurve> priceIndexCurves;

  //TODO useful to have combinedWith?

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code PriceIndexCurveMap}.
   * @return the meta-bean, not null
   */
  public static PriceIndexCurveMap.Meta meta() {
    return PriceIndexCurveMap.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(PriceIndexCurveMap.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static PriceIndexCurveMap.Builder builder() {
    return new PriceIndexCurveMap.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected PriceIndexCurveMap(PriceIndexCurveMap.Builder builder) {
    JodaBeanUtils.notNull(builder.priceIndexCurves, "priceIndexCurves");
    this.priceIndexCurves = ImmutableMap.copyOf(builder.priceIndexCurves);
  }

  @Override
  public PriceIndexCurveMap.Meta metaBean() {
    return PriceIndexCurveMap.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the priceIndexCurves.
   * @return the value of the property, not null
   */
  public ImmutableMap<PriceIndex, PriceIndexCurve> getPriceIndexCurves() {
    return priceIndexCurves;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      PriceIndexCurveMap other = (PriceIndexCurveMap) obj;
      return JodaBeanUtils.equal(getPriceIndexCurves(), other.getPriceIndexCurves());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getPriceIndexCurves());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("PriceIndexCurveMap{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("priceIndexCurves").append('=').append(JodaBeanUtils.toString(getPriceIndexCurves())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code PriceIndexCurveMap}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code priceIndexCurves} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<PriceIndex, PriceIndexCurve>> priceIndexCurves = DirectMetaProperty.ofImmutable(
        this, "priceIndexCurves", PriceIndexCurveMap.class, (Class) ImmutableMap.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "priceIndexCurves");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 897469389:  // priceIndexCurves
          return priceIndexCurves;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public PriceIndexCurveMap.Builder builder() {
      return new PriceIndexCurveMap.Builder();
    }

    @Override
    public Class<? extends PriceIndexCurveMap> beanType() {
      return PriceIndexCurveMap.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code priceIndexCurves} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ImmutableMap<PriceIndex, PriceIndexCurve>> priceIndexCurves() {
      return priceIndexCurves;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 897469389:  // priceIndexCurves
          return ((PriceIndexCurveMap) bean).getPriceIndexCurves();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code PriceIndexCurveMap}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<PriceIndexCurveMap> {

    private Map<PriceIndex, PriceIndexCurve> priceIndexCurves = ImmutableMap.of();

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(PriceIndexCurveMap beanToCopy) {
      this.priceIndexCurves = beanToCopy.getPriceIndexCurves();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 897469389:  // priceIndexCurves
          return priceIndexCurves;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 897469389:  // priceIndexCurves
          this.priceIndexCurves = (Map<PriceIndex, PriceIndexCurve>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public PriceIndexCurveMap build() {
      return new PriceIndexCurveMap(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code priceIndexCurves} property in the builder.
     * @param priceIndexCurves  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder priceIndexCurves(Map<PriceIndex, PriceIndexCurve> priceIndexCurves) {
      JodaBeanUtils.notNull(priceIndexCurves, "priceIndexCurves");
      this.priceIndexCurves = priceIndexCurves;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("PriceIndexCurveMap.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("priceIndexCurves").append('=').append(JodaBeanUtils.toString(priceIndexCurves)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
