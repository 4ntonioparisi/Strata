/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.finance.fx;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableValidator;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.currency.CurrencyAmount;
import com.opengamma.strata.collect.ArgChecker;

/**
 * A simple foreign exchange between two counterparties.
 * <p>
 * This represents a single foreign exchange on a specific date.
 * For example, it might represent the payment of USD 1,000 and the receipt of EUR 932.
 * <p>
 * Application code will generally use {@link FxForward} instead of this class.
 */
@BeanDefinition
public final class FxExchange
    implements FxExchangeProduct, ImmutableBean, Serializable {

  /**
   * The amount to be paid.
   * <p>
   * This amount will be paid to the counterparty.
   * The amount must be negative as an additional indication that this is to be paid.
   * The currency must differ from the received amount.
   */
  @PropertyDefinition(validate = "notNull")
  private final FxPayment pay;
  /**
   * The amount to be received.
   * <p>
   * This amount will be received from the counterparty.
   * The amount must be positive as an additional indication that this is to be received.
   * The currency must differ from the pay amount.
   */
  @PropertyDefinition(validate = "notNull")
  private final FxPayment receive;

  //-------------------------------------------------------------------------
  /**
   * Creates an {@code FxExchange} from two amounts and the value date.
   * <p>
   * The signs of the amounts will be normalized as necessary.
   * The currencies of the amounts must differ.
   * 
   * @param pay  the amount to be paid
   * @param receive  the amount to be received
   * @param valueDate  the value date
   * @return the foreign exchange
   */
  public static FxExchange of(CurrencyAmount pay, CurrencyAmount receive, LocalDate valueDate) {
    return new FxExchange(FxPayment.ofPay(valueDate, pay), FxPayment.ofReceive(valueDate, receive));
  }

  /**
   * Creates an {@code FxExchange} from two payments.
   * <p>
   * The payments must be of the correct type, one pay and one receive.
   * The currencies of the payments must differ.
   * 
   * @param pay  the amount to be paid
   * @param receive  the amount to be received
   * @return the foreign exchange
   */
  public static FxExchange of(FxPayment pay, FxPayment receive) {
    return new FxExchange(pay, receive);
  }

  //-------------------------------------------------------------------------
  @ImmutableValidator
  private void validate() {
    ArgChecker.isTrue(pay.getPayReceive().isPay(), "Must not pass a receive amount into the pay field");
    ArgChecker.isTrue(receive.getPayReceive().isReceive(), "Must not pass a pay amount into the receive field");
    ArgChecker.isFalse(pay.getCurrency().equals(receive.getCurrency()),
        "Pay and Receive must have different currencies");
  }

  //-------------------------------------------------------------------------
  /**
   * Returns the inverse exchange.
   * <p>
   * The inverse exchange swaps the pay and receive amounts, and their signs.
   * 
   * @return the inverse exchange
   */
  public FxExchange inverse() {
    return new FxExchange(receive.inverse(), pay.inverse());
  }

  //-------------------------------------------------------------------------
  /**
   * Expands this foreign exchange, trivially returning {@code this}.
   * 
   * @return this foreign exchange
   */
  @Override
  public FxExchange expand() {
    return this;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FxExchange}.
   * @return the meta-bean, not null
   */
  public static FxExchange.Meta meta() {
    return FxExchange.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FxExchange.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static FxExchange.Builder builder() {
    return new FxExchange.Builder();
  }

  private FxExchange(
      FxPayment pay,
      FxPayment receive) {
    JodaBeanUtils.notNull(pay, "pay");
    JodaBeanUtils.notNull(receive, "receive");
    this.pay = pay;
    this.receive = receive;
    validate();
  }

  @Override
  public FxExchange.Meta metaBean() {
    return FxExchange.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the amount to be paid.
   * <p>
   * This amount will be paid to the counterparty.
   * The amount must be negative as an additional indication that this is to be paid.
   * The currency must differ from the received amount.
   * @return the value of the property, not null
   */
  public FxPayment getPay() {
    return pay;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the amount to be received.
   * <p>
   * This amount will be received from the counterparty.
   * The amount must be positive as an additional indication that this is to be received.
   * The currency must differ from the pay amount.
   * @return the value of the property, not null
   */
  public FxPayment getReceive() {
    return receive;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FxExchange other = (FxExchange) obj;
      return JodaBeanUtils.equal(getPay(), other.getPay()) &&
          JodaBeanUtils.equal(getReceive(), other.getReceive());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getPay());
    hash = hash * 31 + JodaBeanUtils.hashCode(getReceive());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("FxExchange{");
    buf.append("pay").append('=').append(getPay()).append(',').append(' ');
    buf.append("receive").append('=').append(JodaBeanUtils.toString(getReceive()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FxExchange}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code pay} property.
     */
    private final MetaProperty<FxPayment> pay = DirectMetaProperty.ofImmutable(
        this, "pay", FxExchange.class, FxPayment.class);
    /**
     * The meta-property for the {@code receive} property.
     */
    private final MetaProperty<FxPayment> receive = DirectMetaProperty.ofImmutable(
        this, "receive", FxExchange.class, FxPayment.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "pay",
        "receive");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 110760:  // pay
          return pay;
        case 1082290915:  // receive
          return receive;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public FxExchange.Builder builder() {
      return new FxExchange.Builder();
    }

    @Override
    public Class<? extends FxExchange> beanType() {
      return FxExchange.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code pay} property.
     * @return the meta-property, not null
     */
    public MetaProperty<FxPayment> pay() {
      return pay;
    }

    /**
     * The meta-property for the {@code receive} property.
     * @return the meta-property, not null
     */
    public MetaProperty<FxPayment> receive() {
      return receive;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 110760:  // pay
          return ((FxExchange) bean).getPay();
        case 1082290915:  // receive
          return ((FxExchange) bean).getReceive();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FxExchange}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<FxExchange> {

    private FxPayment pay;
    private FxPayment receive;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(FxExchange beanToCopy) {
      this.pay = beanToCopy.getPay();
      this.receive = beanToCopy.getReceive();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 110760:  // pay
          return pay;
        case 1082290915:  // receive
          return receive;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 110760:  // pay
          this.pay = (FxPayment) newValue;
          break;
        case 1082290915:  // receive
          this.receive = (FxPayment) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public FxExchange build() {
      return new FxExchange(
          pay,
          receive);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code pay} property in the builder.
     * @param pay  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder pay(FxPayment pay) {
      JodaBeanUtils.notNull(pay, "pay");
      this.pay = pay;
      return this;
    }

    /**
     * Sets the {@code receive} property in the builder.
     * @param receive  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder receive(FxPayment receive) {
      JodaBeanUtils.notNull(receive, "receive");
      this.receive = receive;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("FxExchange.Builder{");
      buf.append("pay").append('=').append(JodaBeanUtils.toString(pay)).append(',').append(' ');
      buf.append("receive").append('=').append(JodaBeanUtils.toString(receive));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
