/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.finance.fx;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableValidator;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.currency.CurrencyAmount;
import com.opengamma.strata.collect.ArgChecker;

/**
 * An FX forward, which can also be used to represent an FX spot.
 * <p>
 * An FX forward is a financial instrument that represents the exchange of an equivalent amount
 * in two different currencies between counterparties on a specific date.
 * For example, it might represent the payment of USD 1,000 and the receipt of EUR 932.
 * <p>
 * Since a FX spot is essentially equivalent, simply with a different meaning applied to the date,
 * it can also be represented using this class.
 */
@BeanDefinition
public final class FxForward
    implements FxExchangeProduct, ImmutableBean, Serializable {

  /**
   * The amount to be paid.
   * <p>
   * This amount will be paid to the counterparty.
   * The amount must be negative as an additional indication that this is to be paid.
   * The currency must differ from the received amount.
   */
  @PropertyDefinition(validate = "notNull")
  private final CurrencyAmount pay;
  /**
   * The amount to be received.
   * <p>
   * This amount will be received from the counterparty.
   * The amount must be positive as an additional indication that this is to be received.
   * The currency must differ from the pay amount.
   */
  @PropertyDefinition(validate = "notNull")
  private final CurrencyAmount receive;
  /**
   * The date that the forward settles.
   * <p>
   * On this date, the pay and receive amounts will be exchanged.
   * This date should be a valid business day.
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate valueDate;

  //-------------------------------------------------------------------------
  /**
   * Creates an {@code FxForward} from two amounts and the value date.
   * <p>
   * The signs of the amounts will be normalized as necessary.
   * The currencies of the amounts must differ.
   * No business day adjustment applies to the value date.
   * 
   * @param pay  the amount to be paid
   * @param receive  the amount to be received
   * @param valueDate  the value date
   * @return the FX forward
   */
  public static FxForward of(CurrencyAmount pay, CurrencyAmount receive, LocalDate valueDate) {
    return new FxForward(pay.negative(), receive.positive(), valueDate);
  }

  //-------------------------------------------------------------------------
  @ImmutableValidator
  private void validate() {
    ArgChecker.notNegativeOrZero(pay.getAmount(), "payAmount");
    ArgChecker.notNegativeOrZero(receive.getAmount(), "receiveAmount");
    ArgChecker.isFalse(pay.getCurrency().equals(receive.getCurrency()),
        "Pay and Receive must have different currencies");
  }

  //-------------------------------------------------------------------------
  /**
   * Expands this FX forward into an {@code FxExchange}.
   * 
   * @return the foreign exchange
   */
  @Override
  public FxExchange expand() {
    return FxExchange.of(pay, receive, valueDate);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FxForward}.
   * @return the meta-bean, not null
   */
  public static FxForward.Meta meta() {
    return FxForward.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FxForward.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static FxForward.Builder builder() {
    return new FxForward.Builder();
  }

  private FxForward(
      CurrencyAmount pay,
      CurrencyAmount receive,
      LocalDate valueDate) {
    JodaBeanUtils.notNull(pay, "pay");
    JodaBeanUtils.notNull(receive, "receive");
    JodaBeanUtils.notNull(valueDate, "valueDate");
    this.pay = pay;
    this.receive = receive;
    this.valueDate = valueDate;
    validate();
  }

  @Override
  public FxForward.Meta metaBean() {
    return FxForward.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the amount to be paid.
   * <p>
   * This amount will be paid to the counterparty.
   * The amount must be negative as an additional indication that this is to be paid.
   * The currency must differ from the received amount.
   * @return the value of the property, not null
   */
  public CurrencyAmount getPay() {
    return pay;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the amount to be received.
   * <p>
   * This amount will be received from the counterparty.
   * The amount must be positive as an additional indication that this is to be received.
   * The currency must differ from the pay amount.
   * @return the value of the property, not null
   */
  public CurrencyAmount getReceive() {
    return receive;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the date that the forward settles.
   * <p>
   * On this date, the pay and receive amounts will be exchanged.
   * This date should be a valid business day.
   * @return the value of the property, not null
   */
  public LocalDate getValueDate() {
    return valueDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FxForward other = (FxForward) obj;
      return JodaBeanUtils.equal(getPay(), other.getPay()) &&
          JodaBeanUtils.equal(getReceive(), other.getReceive()) &&
          JodaBeanUtils.equal(getValueDate(), other.getValueDate());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getPay());
    hash = hash * 31 + JodaBeanUtils.hashCode(getReceive());
    hash = hash * 31 + JodaBeanUtils.hashCode(getValueDate());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("FxForward{");
    buf.append("pay").append('=').append(getPay()).append(',').append(' ');
    buf.append("receive").append('=').append(getReceive()).append(',').append(' ');
    buf.append("valueDate").append('=').append(JodaBeanUtils.toString(getValueDate()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FxForward}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code pay} property.
     */
    private final MetaProperty<CurrencyAmount> pay = DirectMetaProperty.ofImmutable(
        this, "pay", FxForward.class, CurrencyAmount.class);
    /**
     * The meta-property for the {@code receive} property.
     */
    private final MetaProperty<CurrencyAmount> receive = DirectMetaProperty.ofImmutable(
        this, "receive", FxForward.class, CurrencyAmount.class);
    /**
     * The meta-property for the {@code valueDate} property.
     */
    private final MetaProperty<LocalDate> valueDate = DirectMetaProperty.ofImmutable(
        this, "valueDate", FxForward.class, LocalDate.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "pay",
        "receive",
        "valueDate");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 110760:  // pay
          return pay;
        case 1082290915:  // receive
          return receive;
        case -766192449:  // valueDate
          return valueDate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public FxForward.Builder builder() {
      return new FxForward.Builder();
    }

    @Override
    public Class<? extends FxForward> beanType() {
      return FxForward.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code pay} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurrencyAmount> pay() {
      return pay;
    }

    /**
     * The meta-property for the {@code receive} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurrencyAmount> receive() {
      return receive;
    }

    /**
     * The meta-property for the {@code valueDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> valueDate() {
      return valueDate;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 110760:  // pay
          return ((FxForward) bean).getPay();
        case 1082290915:  // receive
          return ((FxForward) bean).getReceive();
        case -766192449:  // valueDate
          return ((FxForward) bean).getValueDate();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FxForward}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<FxForward> {

    private CurrencyAmount pay;
    private CurrencyAmount receive;
    private LocalDate valueDate;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(FxForward beanToCopy) {
      this.pay = beanToCopy.getPay();
      this.receive = beanToCopy.getReceive();
      this.valueDate = beanToCopy.getValueDate();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 110760:  // pay
          return pay;
        case 1082290915:  // receive
          return receive;
        case -766192449:  // valueDate
          return valueDate;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 110760:  // pay
          this.pay = (CurrencyAmount) newValue;
          break;
        case 1082290915:  // receive
          this.receive = (CurrencyAmount) newValue;
          break;
        case -766192449:  // valueDate
          this.valueDate = (LocalDate) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public FxForward build() {
      return new FxForward(
          pay,
          receive,
          valueDate);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code pay} property in the builder.
     * @param pay  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder pay(CurrencyAmount pay) {
      JodaBeanUtils.notNull(pay, "pay");
      this.pay = pay;
      return this;
    }

    /**
     * Sets the {@code receive} property in the builder.
     * @param receive  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder receive(CurrencyAmount receive) {
      JodaBeanUtils.notNull(receive, "receive");
      this.receive = receive;
      return this;
    }

    /**
     * Sets the {@code valueDate} property in the builder.
     * @param valueDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder valueDate(LocalDate valueDate) {
      JodaBeanUtils.notNull(valueDate, "valueDate");
      this.valueDate = valueDate;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("FxForward.Builder{");
      buf.append("pay").append('=').append(JodaBeanUtils.toString(pay)).append(',').append(' ');
      buf.append("receive").append('=').append(JodaBeanUtils.toString(receive)).append(',').append(' ');
      buf.append("valueDate").append('=').append(JodaBeanUtils.toString(valueDate));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
