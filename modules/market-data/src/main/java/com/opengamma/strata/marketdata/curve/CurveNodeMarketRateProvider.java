/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.marketdata.curve;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableSet;
import com.opengamma.strata.marketdata.CalculationRequirements;
import com.opengamma.strata.marketdata.key.ObservableKey;

/**
 * A rate provider for curve nodes which requests the rate from a set of market data.
 */
@BeanDefinition
public final class CurveNodeMarketRateProvider implements CurveNodeRateProvider, ImmutableBean {

  /** The key identifying the market data value which provides the rate. */
  @PropertyDefinition(validate = "notNull")
  private final ObservableKey rateKey;

  /**
   * Returns a provider which provides a rate identified by a market data key.
   *
   * @param rateKey  the market data key identifying the rate returned by the provider
   * @return a provider which returns a rate identified by a market data key
   */
  public static CurveNodeMarketRateProvider of(ObservableKey rateKey) {
    return new CurveNodeMarketRateProvider(rateKey);
  }

  @Override
  public CalculationRequirements requirements() {
    return CalculationRequirements.builder().singleValueRequirements(ImmutableSet.of(rateKey)).build();
  }

  @Override
  public double rate(CurveNodeMarketData marketData) {
    return marketData.getValue(rateKey);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CurveNodeMarketRateProvider}.
   * @return the meta-bean, not null
   */
  public static CurveNodeMarketRateProvider.Meta meta() {
    return CurveNodeMarketRateProvider.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(CurveNodeMarketRateProvider.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static CurveNodeMarketRateProvider.Builder builder() {
    return new CurveNodeMarketRateProvider.Builder();
  }

  private CurveNodeMarketRateProvider(
      ObservableKey rateKey) {
    JodaBeanUtils.notNull(rateKey, "rateKey");
    this.rateKey = rateKey;
  }

  @Override
  public CurveNodeMarketRateProvider.Meta metaBean() {
    return CurveNodeMarketRateProvider.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the key identifying the market data value which provides the rate.
   * @return the value of the property, not null
   */
  public ObservableKey getRateKey() {
    return rateKey;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CurveNodeMarketRateProvider other = (CurveNodeMarketRateProvider) obj;
      return JodaBeanUtils.equal(getRateKey(), other.getRateKey());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getRateKey());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("CurveNodeMarketRateProvider{");
    buf.append("rateKey").append('=').append(JodaBeanUtils.toString(getRateKey()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CurveNodeMarketRateProvider}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code rateKey} property.
     */
    private final MetaProperty<ObservableKey> rateKey = DirectMetaProperty.ofImmutable(
        this, "rateKey", CurveNodeMarketRateProvider.class, ObservableKey.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "rateKey");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 983444831:  // rateKey
          return rateKey;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public CurveNodeMarketRateProvider.Builder builder() {
      return new CurveNodeMarketRateProvider.Builder();
    }

    @Override
    public Class<? extends CurveNodeMarketRateProvider> beanType() {
      return CurveNodeMarketRateProvider.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code rateKey} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ObservableKey> rateKey() {
      return rateKey;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 983444831:  // rateKey
          return ((CurveNodeMarketRateProvider) bean).getRateKey();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code CurveNodeMarketRateProvider}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<CurveNodeMarketRateProvider> {

    private ObservableKey rateKey;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(CurveNodeMarketRateProvider beanToCopy) {
      this.rateKey = beanToCopy.getRateKey();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 983444831:  // rateKey
          return rateKey;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 983444831:  // rateKey
          this.rateKey = (ObservableKey) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public CurveNodeMarketRateProvider build() {
      return new CurveNodeMarketRateProvider(
          rateKey);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code rateKey} property in the builder.
     * @param rateKey  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder rateKey(ObservableKey rateKey) {
      JodaBeanUtils.notNull(rateKey, "rateKey");
      this.rateKey = rateKey;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("CurveNodeMarketRateProvider.Builder{");
      buf.append("rateKey").append('=').append(JodaBeanUtils.toString(rateKey));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
