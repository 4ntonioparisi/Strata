package com.opengamma.strata.product.credit.cds;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition(builderScope = "private")
public final class PointsUpFront
    implements CdsQuoteConvention, ImmutableBean, Serializable {

  @PropertyDefinition(overrideGet = true)
  private final double coupon;

  @PropertyDefinition
  private final double puf;

  public double getPointsUpFront() {
    return puf;
  }

  public static PointsUpFront of(double coupon, double puf) {
    return new PointsUpFront(coupon, puf);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code PointsUpFront}.
   * @return the meta-bean, not null
   */
  public static PointsUpFront.Meta meta() {
    return PointsUpFront.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(PointsUpFront.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private PointsUpFront(
      double coupon,
      double puf) {
    this.coupon = coupon;
    this.puf = puf;
  }

  @Override
  public PointsUpFront.Meta metaBean() {
    return PointsUpFront.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the coupon.
   * @return the value of the property
   */
  @Override
  public double getCoupon() {
    return coupon;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the puf.
   * @return the value of the property
   */
  public double getPuf() {
    return puf;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      PointsUpFront other = (PointsUpFront) obj;
      return JodaBeanUtils.equal(coupon, other.coupon) &&
          JodaBeanUtils.equal(puf, other.puf);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(coupon);
    hash = hash * 31 + JodaBeanUtils.hashCode(puf);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("PointsUpFront{");
    buf.append("coupon").append('=').append(coupon).append(',').append(' ');
    buf.append("puf").append('=').append(JodaBeanUtils.toString(puf));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code PointsUpFront}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code coupon} property.
     */
    private final MetaProperty<Double> coupon = DirectMetaProperty.ofImmutable(
        this, "coupon", PointsUpFront.class, Double.TYPE);
    /**
     * The meta-property for the {@code puf} property.
     */
    private final MetaProperty<Double> puf = DirectMetaProperty.ofImmutable(
        this, "puf", PointsUpFront.class, Double.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "coupon",
        "puf");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1354573786:  // coupon
          return coupon;
        case 111361:  // puf
          return puf;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends PointsUpFront> builder() {
      return new PointsUpFront.Builder();
    }

    @Override
    public Class<? extends PointsUpFront> beanType() {
      return PointsUpFront.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code coupon} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> coupon() {
      return coupon;
    }

    /**
     * The meta-property for the {@code puf} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> puf() {
      return puf;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1354573786:  // coupon
          return ((PointsUpFront) bean).getCoupon();
        case 111361:  // puf
          return ((PointsUpFront) bean).getPuf();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code PointsUpFront}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<PointsUpFront> {

    private double coupon;
    private double puf;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1354573786:  // coupon
          return coupon;
        case 111361:  // puf
          return puf;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1354573786:  // coupon
          this.coupon = (Double) newValue;
          break;
        case 111361:  // puf
          this.puf = (Double) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public PointsUpFront build() {
      return new PointsUpFront(
          coupon,
          puf);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("PointsUpFront.Builder{");
      buf.append("coupon").append('=').append(JodaBeanUtils.toString(coupon)).append(',').append(' ');
      buf.append("puf").append('=').append(JodaBeanUtils.toString(puf));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
