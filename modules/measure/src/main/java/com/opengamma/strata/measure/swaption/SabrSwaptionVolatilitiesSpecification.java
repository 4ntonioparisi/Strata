/*
 * Copyright (C) 2017 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.measure.swaption;

import java.io.Serializable;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

import org.joda.beans.Bean;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.opengamma.strata.basics.ReferenceData;
import com.opengamma.strata.basics.date.DayCount;
import com.opengamma.strata.basics.index.IborIndex;
import com.opengamma.strata.collect.array.DoubleArray;
import com.opengamma.strata.market.surface.Surface;
import com.opengamma.strata.market.surface.interpolator.SurfaceInterpolator;
import com.opengamma.strata.pricer.model.SabrVolatilityFormula;
import com.opengamma.strata.pricer.rate.RatesProvider;
import com.opengamma.strata.pricer.swap.DiscountingSwapProductPricer;
import com.opengamma.strata.pricer.swaption.SabrParametersSwaptionVolatilities;
import com.opengamma.strata.pricer.swaption.SabrSwaptionCalibrator;
import com.opengamma.strata.pricer.swaption.SabrSwaptionDefinition;
import com.opengamma.strata.pricer.swaption.SwaptionVolatilitiesName;
import com.opengamma.strata.product.swap.type.FixedIborSwapConvention;

@BeanDefinition
public class SabrSwaptionVolatilitiesSpecification
    implements SwaptionVolatilitiesSpecification, ImmutableBean, Serializable {


  /**
   * The name of the volatilities.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final SwaptionVolatilitiesName name;

  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final ImmutableList<SwaptionVolatilitiesNode> nodes;

//  @PropertyDefinition(validate = "notNull")
//  private final ValueType volatilityValueType; // Black

  /**
   * The swap convention that the volatilities are to be used for.
   */
  @PropertyDefinition(validate = "notNull")
  private final FixedIborSwapConvention convention;
  /**
   * The day count to use.
   */
  @PropertyDefinition(validate = "notNull")
  private final DayCount dayCount;
  /**
   * The interpolator for the alpha, rho and nu surfaces.
   */
  @PropertyDefinition(validate = "notNull")
  private final SurfaceInterpolator interpolator;

  @PropertyDefinition(validate = "notNull")
  private final Surface betaSurface; // TODO optional?

  @PropertyDefinition(validate = "notNull")
  private final Surface shiftSurface;

  /**
   * The SABR implied volatility formula.
   */
  @PropertyDefinition(validate = "notNull")  // TODO default
  private final SabrVolatilityFormula sabrVolatilityFormula;
  /**
   * The swap pricer.
   * Required for forward rate computation.
   */
  @PropertyDefinition(validate = "notNull")  // TODO default
  private final DiscountingSwapProductPricer swapPricer;

  @Override
  public IborIndex getIndex() {
    return null;
  }

  @Override
  public SabrParametersSwaptionVolatilities volatilities(
      ZonedDateTime valuationDateTime,
      DoubleArray parameters,
      RatesProvider ratesProvider,
      ReferenceData refData) {

    SabrSwaptionCalibrator calibrator = SabrSwaptionCalibrator.of(sabrVolatilityFormula, swapPricer, refData);
    SabrSwaptionDefinition definition = SabrSwaptionDefinition.of(name, convention, dayCount, interpolator); // TODO

    return calibrator.calibrateWithFixedBetaAndShift(
        definition, valuationDateTime, null, ratesProvider, betaSurface, shiftSurface);
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code SabrSwaptionVolatilitiesSpecification}.
   * @return the meta-bean, not null
   */
  public static SabrSwaptionVolatilitiesSpecification.Meta meta() {
    return SabrSwaptionVolatilitiesSpecification.Meta.INSTANCE;
  }

  static {
    MetaBean.register(SabrSwaptionVolatilitiesSpecification.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static SabrSwaptionVolatilitiesSpecification.Builder builder() {
    return new SabrSwaptionVolatilitiesSpecification.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected SabrSwaptionVolatilitiesSpecification(SabrSwaptionVolatilitiesSpecification.Builder builder) {
    JodaBeanUtils.notNull(builder.name, "name");
    JodaBeanUtils.notNull(builder.nodes, "nodes");
    JodaBeanUtils.notNull(builder.convention, "convention");
    JodaBeanUtils.notNull(builder.dayCount, "dayCount");
    JodaBeanUtils.notNull(builder.interpolator, "interpolator");
    JodaBeanUtils.notNull(builder.betaSurface, "betaSurface");
    JodaBeanUtils.notNull(builder.shiftSurface, "shiftSurface");
    JodaBeanUtils.notNull(builder.sabrVolatilityFormula, "sabrVolatilityFormula");
    JodaBeanUtils.notNull(builder.swapPricer, "swapPricer");
    this.name = builder.name;
    this.nodes = ImmutableList.copyOf(builder.nodes);
    this.convention = builder.convention;
    this.dayCount = builder.dayCount;
    this.interpolator = builder.interpolator;
    this.betaSurface = builder.betaSurface;
    this.shiftSurface = builder.shiftSurface;
    this.sabrVolatilityFormula = builder.sabrVolatilityFormula;
    this.swapPricer = builder.swapPricer;
  }

  @Override
  public SabrSwaptionVolatilitiesSpecification.Meta metaBean() {
    return SabrSwaptionVolatilitiesSpecification.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name of the volatilities.
   * @return the value of the property, not null
   */
  @Override
  public SwaptionVolatilitiesName getName() {
    return name;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the nodes.
   * @return the value of the property, not null
   */
  @Override
  public ImmutableList<SwaptionVolatilitiesNode> getNodes() {
    return nodes;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the swap convention that the volatilities are to be used for.
   * @return the value of the property, not null
   */
  public FixedIborSwapConvention getConvention() {
    return convention;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the day count to use.
   * @return the value of the property, not null
   */
  public DayCount getDayCount() {
    return dayCount;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the interpolator for the alpha, rho and nu surfaces.
   * @return the value of the property, not null
   */
  public SurfaceInterpolator getInterpolator() {
    return interpolator;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the betaSurface.
   * @return the value of the property, not null
   */
  public Surface getBetaSurface() {
    return betaSurface;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the shiftSurface.
   * @return the value of the property, not null
   */
  public Surface getShiftSurface() {
    return shiftSurface;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the SABR implied volatility formula.
   * @return the value of the property, not null
   */
  public SabrVolatilityFormula getSabrVolatilityFormula() {
    return sabrVolatilityFormula;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the swap pricer.
   * Required for forward rate computation.
   * @return the value of the property, not null
   */
  public DiscountingSwapProductPricer getSwapPricer() {
    return swapPricer;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      SabrSwaptionVolatilitiesSpecification other = (SabrSwaptionVolatilitiesSpecification) obj;
      return JodaBeanUtils.equal(name, other.name) &&
          JodaBeanUtils.equal(nodes, other.nodes) &&
          JodaBeanUtils.equal(convention, other.convention) &&
          JodaBeanUtils.equal(dayCount, other.dayCount) &&
          JodaBeanUtils.equal(interpolator, other.interpolator) &&
          JodaBeanUtils.equal(betaSurface, other.betaSurface) &&
          JodaBeanUtils.equal(shiftSurface, other.shiftSurface) &&
          JodaBeanUtils.equal(sabrVolatilityFormula, other.sabrVolatilityFormula) &&
          JodaBeanUtils.equal(swapPricer, other.swapPricer);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(name);
    hash = hash * 31 + JodaBeanUtils.hashCode(nodes);
    hash = hash * 31 + JodaBeanUtils.hashCode(convention);
    hash = hash * 31 + JodaBeanUtils.hashCode(dayCount);
    hash = hash * 31 + JodaBeanUtils.hashCode(interpolator);
    hash = hash * 31 + JodaBeanUtils.hashCode(betaSurface);
    hash = hash * 31 + JodaBeanUtils.hashCode(shiftSurface);
    hash = hash * 31 + JodaBeanUtils.hashCode(sabrVolatilityFormula);
    hash = hash * 31 + JodaBeanUtils.hashCode(swapPricer);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(320);
    buf.append("SabrSwaptionVolatilitiesSpecification{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("name").append('=').append(JodaBeanUtils.toString(name)).append(',').append(' ');
    buf.append("nodes").append('=').append(JodaBeanUtils.toString(nodes)).append(',').append(' ');
    buf.append("convention").append('=').append(JodaBeanUtils.toString(convention)).append(',').append(' ');
    buf.append("dayCount").append('=').append(JodaBeanUtils.toString(dayCount)).append(',').append(' ');
    buf.append("interpolator").append('=').append(JodaBeanUtils.toString(interpolator)).append(',').append(' ');
    buf.append("betaSurface").append('=').append(JodaBeanUtils.toString(betaSurface)).append(',').append(' ');
    buf.append("shiftSurface").append('=').append(JodaBeanUtils.toString(shiftSurface)).append(',').append(' ');
    buf.append("sabrVolatilityFormula").append('=').append(JodaBeanUtils.toString(sabrVolatilityFormula)).append(',').append(' ');
    buf.append("swapPricer").append('=').append(JodaBeanUtils.toString(swapPricer)).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SabrSwaptionVolatilitiesSpecification}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<SwaptionVolatilitiesName> name = DirectMetaProperty.ofImmutable(
        this, "name", SabrSwaptionVolatilitiesSpecification.class, SwaptionVolatilitiesName.class);
    /**
     * The meta-property for the {@code nodes} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<SwaptionVolatilitiesNode>> nodes = DirectMetaProperty.ofImmutable(
        this, "nodes", SabrSwaptionVolatilitiesSpecification.class, (Class) ImmutableList.class);
    /**
     * The meta-property for the {@code convention} property.
     */
    private final MetaProperty<FixedIborSwapConvention> convention = DirectMetaProperty.ofImmutable(
        this, "convention", SabrSwaptionVolatilitiesSpecification.class, FixedIborSwapConvention.class);
    /**
     * The meta-property for the {@code dayCount} property.
     */
    private final MetaProperty<DayCount> dayCount = DirectMetaProperty.ofImmutable(
        this, "dayCount", SabrSwaptionVolatilitiesSpecification.class, DayCount.class);
    /**
     * The meta-property for the {@code interpolator} property.
     */
    private final MetaProperty<SurfaceInterpolator> interpolator = DirectMetaProperty.ofImmutable(
        this, "interpolator", SabrSwaptionVolatilitiesSpecification.class, SurfaceInterpolator.class);
    /**
     * The meta-property for the {@code betaSurface} property.
     */
    private final MetaProperty<Surface> betaSurface = DirectMetaProperty.ofImmutable(
        this, "betaSurface", SabrSwaptionVolatilitiesSpecification.class, Surface.class);
    /**
     * The meta-property for the {@code shiftSurface} property.
     */
    private final MetaProperty<Surface> shiftSurface = DirectMetaProperty.ofImmutable(
        this, "shiftSurface", SabrSwaptionVolatilitiesSpecification.class, Surface.class);
    /**
     * The meta-property for the {@code sabrVolatilityFormula} property.
     */
    private final MetaProperty<SabrVolatilityFormula> sabrVolatilityFormula = DirectMetaProperty.ofImmutable(
        this, "sabrVolatilityFormula", SabrSwaptionVolatilitiesSpecification.class, SabrVolatilityFormula.class);
    /**
     * The meta-property for the {@code swapPricer} property.
     */
    private final MetaProperty<DiscountingSwapProductPricer> swapPricer = DirectMetaProperty.ofImmutable(
        this, "swapPricer", SabrSwaptionVolatilitiesSpecification.class, DiscountingSwapProductPricer.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "name",
        "nodes",
        "convention",
        "dayCount",
        "interpolator",
        "betaSurface",
        "shiftSurface",
        "sabrVolatilityFormula",
        "swapPricer");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return name;
        case 104993457:  // nodes
          return nodes;
        case 2039569265:  // convention
          return convention;
        case 1905311443:  // dayCount
          return dayCount;
        case 2096253127:  // interpolator
          return interpolator;
        case -526589795:  // betaSurface
          return betaSurface;
        case 1038377419:  // shiftSurface
          return shiftSurface;
        case -683564541:  // sabrVolatilityFormula
          return sabrVolatilityFormula;
        case -1194017860:  // swapPricer
          return swapPricer;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public SabrSwaptionVolatilitiesSpecification.Builder builder() {
      return new SabrSwaptionVolatilitiesSpecification.Builder();
    }

    @Override
    public Class<? extends SabrSwaptionVolatilitiesSpecification> beanType() {
      return SabrSwaptionVolatilitiesSpecification.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<SwaptionVolatilitiesName> name() {
      return name;
    }

    /**
     * The meta-property for the {@code nodes} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ImmutableList<SwaptionVolatilitiesNode>> nodes() {
      return nodes;
    }

    /**
     * The meta-property for the {@code convention} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<FixedIborSwapConvention> convention() {
      return convention;
    }

    /**
     * The meta-property for the {@code dayCount} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<DayCount> dayCount() {
      return dayCount;
    }

    /**
     * The meta-property for the {@code interpolator} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<SurfaceInterpolator> interpolator() {
      return interpolator;
    }

    /**
     * The meta-property for the {@code betaSurface} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Surface> betaSurface() {
      return betaSurface;
    }

    /**
     * The meta-property for the {@code shiftSurface} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Surface> shiftSurface() {
      return shiftSurface;
    }

    /**
     * The meta-property for the {@code sabrVolatilityFormula} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<SabrVolatilityFormula> sabrVolatilityFormula() {
      return sabrVolatilityFormula;
    }

    /**
     * The meta-property for the {@code swapPricer} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<DiscountingSwapProductPricer> swapPricer() {
      return swapPricer;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return ((SabrSwaptionVolatilitiesSpecification) bean).getName();
        case 104993457:  // nodes
          return ((SabrSwaptionVolatilitiesSpecification) bean).getNodes();
        case 2039569265:  // convention
          return ((SabrSwaptionVolatilitiesSpecification) bean).getConvention();
        case 1905311443:  // dayCount
          return ((SabrSwaptionVolatilitiesSpecification) bean).getDayCount();
        case 2096253127:  // interpolator
          return ((SabrSwaptionVolatilitiesSpecification) bean).getInterpolator();
        case -526589795:  // betaSurface
          return ((SabrSwaptionVolatilitiesSpecification) bean).getBetaSurface();
        case 1038377419:  // shiftSurface
          return ((SabrSwaptionVolatilitiesSpecification) bean).getShiftSurface();
        case -683564541:  // sabrVolatilityFormula
          return ((SabrSwaptionVolatilitiesSpecification) bean).getSabrVolatilityFormula();
        case -1194017860:  // swapPricer
          return ((SabrSwaptionVolatilitiesSpecification) bean).getSwapPricer();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code SabrSwaptionVolatilitiesSpecification}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<SabrSwaptionVolatilitiesSpecification> {

    private SwaptionVolatilitiesName name;
    private List<SwaptionVolatilitiesNode> nodes = ImmutableList.of();
    private FixedIborSwapConvention convention;
    private DayCount dayCount;
    private SurfaceInterpolator interpolator;
    private Surface betaSurface;
    private Surface shiftSurface;
    private SabrVolatilityFormula sabrVolatilityFormula;
    private DiscountingSwapProductPricer swapPricer;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(SabrSwaptionVolatilitiesSpecification beanToCopy) {
      this.name = beanToCopy.getName();
      this.nodes = beanToCopy.getNodes();
      this.convention = beanToCopy.getConvention();
      this.dayCount = beanToCopy.getDayCount();
      this.interpolator = beanToCopy.getInterpolator();
      this.betaSurface = beanToCopy.getBetaSurface();
      this.shiftSurface = beanToCopy.getShiftSurface();
      this.sabrVolatilityFormula = beanToCopy.getSabrVolatilityFormula();
      this.swapPricer = beanToCopy.getSwapPricer();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return name;
        case 104993457:  // nodes
          return nodes;
        case 2039569265:  // convention
          return convention;
        case 1905311443:  // dayCount
          return dayCount;
        case 2096253127:  // interpolator
          return interpolator;
        case -526589795:  // betaSurface
          return betaSurface;
        case 1038377419:  // shiftSurface
          return shiftSurface;
        case -683564541:  // sabrVolatilityFormula
          return sabrVolatilityFormula;
        case -1194017860:  // swapPricer
          return swapPricer;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          this.name = (SwaptionVolatilitiesName) newValue;
          break;
        case 104993457:  // nodes
          this.nodes = (List<SwaptionVolatilitiesNode>) newValue;
          break;
        case 2039569265:  // convention
          this.convention = (FixedIborSwapConvention) newValue;
          break;
        case 1905311443:  // dayCount
          this.dayCount = (DayCount) newValue;
          break;
        case 2096253127:  // interpolator
          this.interpolator = (SurfaceInterpolator) newValue;
          break;
        case -526589795:  // betaSurface
          this.betaSurface = (Surface) newValue;
          break;
        case 1038377419:  // shiftSurface
          this.shiftSurface = (Surface) newValue;
          break;
        case -683564541:  // sabrVolatilityFormula
          this.sabrVolatilityFormula = (SabrVolatilityFormula) newValue;
          break;
        case -1194017860:  // swapPricer
          this.swapPricer = (DiscountingSwapProductPricer) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public SabrSwaptionVolatilitiesSpecification build() {
      return new SabrSwaptionVolatilitiesSpecification(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the name of the volatilities.
     * @param name  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder name(SwaptionVolatilitiesName name) {
      JodaBeanUtils.notNull(name, "name");
      this.name = name;
      return this;
    }

    /**
     * Sets the nodes.
     * @param nodes  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder nodes(List<SwaptionVolatilitiesNode> nodes) {
      JodaBeanUtils.notNull(nodes, "nodes");
      this.nodes = nodes;
      return this;
    }

    /**
     * Sets the {@code nodes} property in the builder
     * from an array of objects.
     * @param nodes  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder nodes(SwaptionVolatilitiesNode... nodes) {
      return nodes(ImmutableList.copyOf(nodes));
    }

    /**
     * Sets the swap convention that the volatilities are to be used for.
     * @param convention  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder convention(FixedIborSwapConvention convention) {
      JodaBeanUtils.notNull(convention, "convention");
      this.convention = convention;
      return this;
    }

    /**
     * Sets the day count to use.
     * @param dayCount  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder dayCount(DayCount dayCount) {
      JodaBeanUtils.notNull(dayCount, "dayCount");
      this.dayCount = dayCount;
      return this;
    }

    /**
     * Sets the interpolator for the alpha, rho and nu surfaces.
     * @param interpolator  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder interpolator(SurfaceInterpolator interpolator) {
      JodaBeanUtils.notNull(interpolator, "interpolator");
      this.interpolator = interpolator;
      return this;
    }

    /**
     * Sets the betaSurface.
     * @param betaSurface  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder betaSurface(Surface betaSurface) {
      JodaBeanUtils.notNull(betaSurface, "betaSurface");
      this.betaSurface = betaSurface;
      return this;
    }

    /**
     * Sets the shiftSurface.
     * @param shiftSurface  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder shiftSurface(Surface shiftSurface) {
      JodaBeanUtils.notNull(shiftSurface, "shiftSurface");
      this.shiftSurface = shiftSurface;
      return this;
    }

    /**
     * Sets the SABR implied volatility formula.
     * @param sabrVolatilityFormula  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder sabrVolatilityFormula(SabrVolatilityFormula sabrVolatilityFormula) {
      JodaBeanUtils.notNull(sabrVolatilityFormula, "sabrVolatilityFormula");
      this.sabrVolatilityFormula = sabrVolatilityFormula;
      return this;
    }

    /**
     * Sets the swap pricer.
     * Required for forward rate computation.
     * @param swapPricer  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder swapPricer(DiscountingSwapProductPricer swapPricer) {
      JodaBeanUtils.notNull(swapPricer, "swapPricer");
      this.swapPricer = swapPricer;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(320);
      buf.append("SabrSwaptionVolatilitiesSpecification.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("name").append('=').append(JodaBeanUtils.toString(name)).append(',').append(' ');
      buf.append("nodes").append('=').append(JodaBeanUtils.toString(nodes)).append(',').append(' ');
      buf.append("convention").append('=').append(JodaBeanUtils.toString(convention)).append(',').append(' ');
      buf.append("dayCount").append('=').append(JodaBeanUtils.toString(dayCount)).append(',').append(' ');
      buf.append("interpolator").append('=').append(JodaBeanUtils.toString(interpolator)).append(',').append(' ');
      buf.append("betaSurface").append('=').append(JodaBeanUtils.toString(betaSurface)).append(',').append(' ');
      buf.append("shiftSurface").append('=').append(JodaBeanUtils.toString(shiftSurface)).append(',').append(' ');
      buf.append("sabrVolatilityFormula").append('=').append(JodaBeanUtils.toString(sabrVolatilityFormula)).append(',').append(' ');
      buf.append("swapPricer").append('=').append(JodaBeanUtils.toString(swapPricer)).append(',').append(' ');
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
