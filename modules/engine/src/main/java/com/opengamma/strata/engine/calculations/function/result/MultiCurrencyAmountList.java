/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.engine.calculations.function.result;

import static com.opengamma.strata.collect.Guavate.toImmutableList;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.jooq.lambda.Seq;

import com.google.common.collect.ImmutableList;
import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.basics.currency.CurrencyAmount;
import com.opengamma.strata.basics.currency.MultiCurrencyAmount;
import com.opengamma.strata.engine.calculations.function.CalculationMultiFunction;
import com.opengamma.strata.engine.calculations.function.CalculationSingleFunction;
import com.opengamma.strata.engine.calculations.function.CurrencyConvertible;
import com.opengamma.strata.engine.marketdata.CalculationMarketData;

/**
 * A list of multi-currency amounts representing the result of the same calculation performed for multiple scenarios.
 * <p>
 * This class is intended to be used as the return value from the {@code execute} method of
 * implementations of {@link CalculationSingleFunction} and {@link CalculationMultiFunction}.
 * <p>
 * Instances of this class will be automatically converted to the reporting currency by the calculation engine.
 */
@BeanDefinition
public final class MultiCurrencyAmountList implements CurrencyConvertible<CurrencyAmountList>, ImmutableBean {

  /** The multi-currency amounts. */
  @PropertyDefinition(validate = "notNull")
  private final List<MultiCurrencyAmount> amounts;

  @Override
  public CurrencyAmountList convertedTo(Currency reportingCurrency, CalculationMarketData marketData) {
    List<CurrencyAmount> convertedAmounts = Seq.zipWithIndex(amounts.stream())
        .map(tp -> tp.v1.convertedTo(reportingCurrency, ScenarioRateProvider.of(marketData, tp.v2)))
        .collect(toImmutableList());

    return CurrencyAmountList.of(convertedAmounts);
  }

  /**
   * Returns an instance containing the specified individual amounts.
   *
   * @param amounts  the individual currency amounts
   * @return an instance containing the specified individual amounts
   */
  public static MultiCurrencyAmountList of(List<MultiCurrencyAmount> amounts) {
    return new MultiCurrencyAmountList(amounts);
  }

  /**
   * Returns an instance containing the specified individual amounts.
   *
   * @param amounts  the individual currency amounts
   * @return an instance containing the specified individual amounts
   */
  public static MultiCurrencyAmountList of(MultiCurrencyAmount... amounts) {
    return new MultiCurrencyAmountList(ImmutableList.copyOf(amounts));
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code MultiCurrencyAmountList}.
   * @return the meta-bean, not null
   */
  public static MultiCurrencyAmountList.Meta meta() {
    return MultiCurrencyAmountList.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(MultiCurrencyAmountList.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static MultiCurrencyAmountList.Builder builder() {
    return new MultiCurrencyAmountList.Builder();
  }

  private MultiCurrencyAmountList(
      List<MultiCurrencyAmount> amounts) {
    JodaBeanUtils.notNull(amounts, "amounts");
    this.amounts = ImmutableList.copyOf(amounts);
  }

  @Override
  public MultiCurrencyAmountList.Meta metaBean() {
    return MultiCurrencyAmountList.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the multi currency amounts.
   * @return the value of the property, not null
   */
  public List<MultiCurrencyAmount> getAmounts() {
    return amounts;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      MultiCurrencyAmountList other = (MultiCurrencyAmountList) obj;
      return JodaBeanUtils.equal(getAmounts(), other.getAmounts());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getAmounts());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("MultiCurrencyAmountList{");
    buf.append("amounts").append('=').append(JodaBeanUtils.toString(getAmounts()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code MultiCurrencyAmountList}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code amounts} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<MultiCurrencyAmount>> amounts = DirectMetaProperty.ofImmutable(
        this, "amounts", MultiCurrencyAmountList.class, (Class) List.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "amounts");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -879772901:  // amounts
          return amounts;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public MultiCurrencyAmountList.Builder builder() {
      return new MultiCurrencyAmountList.Builder();
    }

    @Override
    public Class<? extends MultiCurrencyAmountList> beanType() {
      return MultiCurrencyAmountList.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code amounts} property.
     * @return the meta-property, not null
     */
    public MetaProperty<List<MultiCurrencyAmount>> amounts() {
      return amounts;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -879772901:  // amounts
          return ((MultiCurrencyAmountList) bean).getAmounts();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code MultiCurrencyAmountList}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<MultiCurrencyAmountList> {

    private List<MultiCurrencyAmount> amounts = ImmutableList.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(MultiCurrencyAmountList beanToCopy) {
      this.amounts = ImmutableList.copyOf(beanToCopy.getAmounts());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -879772901:  // amounts
          return amounts;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -879772901:  // amounts
          this.amounts = (List<MultiCurrencyAmount>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public MultiCurrencyAmountList build() {
      return new MultiCurrencyAmountList(
          amounts);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code amounts} property in the builder.
     * @param amounts  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder amounts(List<MultiCurrencyAmount> amounts) {
      JodaBeanUtils.notNull(amounts, "amounts");
      this.amounts = amounts;
      return this;
    }

    /**
     * Sets the {@code amounts} property in the builder
     * from an array of objects.
     * @param amounts  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder amounts(MultiCurrencyAmount... amounts) {
      return amounts(ImmutableList.copyOf(amounts));
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("MultiCurrencyAmountList.Builder{");
      buf.append("amounts").append('=').append(JodaBeanUtils.toString(amounts));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
