/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.engine;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.stream.Stream;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.opengamma.strata.collect.result.Result;

/**
 * The grid of results calculated by the engine.
 * <p>
 * The grid of results is stored in two dimensions.
 * <p>
 * The first dimension is the list of targets.
 * There is one {@link TradeResults} instance for each input target.
 * The target results are returned in the same order as the input list of targets.
 * <p>
 * The second dimension is the list of columns, representing measures.
 * The column results for a single target are returned as a list within {@code TradeResults}.
 * The column results are returned in the same order as the input list of columns.
 * <p>
 * Scenarios are a third dimension. All the scenario results for each combination
 * of target and column are stored within that cell in the grid.
 */
@BeanDefinition
public final class TradeResultsGrid implements ImmutableBean {
  // the design focuses on a simple grid with indexed access for performance reasons

  /**
   * The list of target-level results returned from an engine calculation.
   */
  @PropertyDefinition(validate = "notNull")
  private final List<TradeResults> rows;

  //-------------------------------------------------------------------------
  /**
   * Create a new result grid.
   * <p>
   * The rows must be in the same order as the input to the engine.
   * The columns within the target rows must be in the same order as the input to the engine.
   *
   * @param targetRows  the results that have been calculated for each target,
   *   containing the results for each measure
   * @return the results grid
   */
  public static TradeResultsGrid of(List<TradeResults> targetRows) {
    return new TradeResultsGrid(targetRows);
  }

  //-------------------------------------------------------------------------
  /**
   * Gets the results for a single row by index.
   * <p>
   * The row represents all the data for a single target.
   * The {@code targetIndex} refers to the list of targets that were the input to the engine.
   * 
   * @param targetIndex  the index of the target in the input list of targets
   * @return the results for the target, containing all columns
   */
  public TradeResults getTradeRow(int targetIndex) {
    return rows.get(targetIndex);
  }

  /**
   * Gets the result for a single cell by index.
   * <p>
   * The cell represents all the data for the combination of a single target and column.
   * The {@code targetIndex} refers to the list of targets that were the input to the engine.
   * The {@code columnIndex} refers to the list of columns that were the input to the engine.
   * 
   * @param targetIndex  the index of the target in the input list of targets
   * @param columnIndex  the index of the column in the input list of columns
   * @return the result for the combination of target and column, which may contain the results for scenarios
   */
  public Result<?> getTradeColumnCell(int targetIndex, int columnIndex) {
    return getTradeRow(targetIndex).getColumn(columnIndex);
  }

  /**
   * Returns the number of rows, one for each target.
   *
   * @return the number of rows
   */
  public int size() {
    return rows.size();
  }

  /**
   * Stream the rows, one for each target.
   *
   * @return a stream of rows, one for each target
   */
  public Stream<TradeResults> stream() {
    return rows.stream();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code TradeResultsGrid}.
   * @return the meta-bean, not null
   */
  public static TradeResultsGrid.Meta meta() {
    return TradeResultsGrid.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(TradeResultsGrid.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static TradeResultsGrid.Builder builder() {
    return new TradeResultsGrid.Builder();
  }

  private TradeResultsGrid(
      List<TradeResults> rows) {
    JodaBeanUtils.notNull(rows, "rows");
    this.rows = ImmutableList.copyOf(rows);
  }

  @Override
  public TradeResultsGrid.Meta metaBean() {
    return TradeResultsGrid.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the list of target-level results returned from an engine calculation.
   * @return the value of the property, not null
   */
  public List<TradeResults> getRows() {
    return rows;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      TradeResultsGrid other = (TradeResultsGrid) obj;
      return JodaBeanUtils.equal(getRows(), other.getRows());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getRows());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("TradeResultsGrid{");
    buf.append("rows").append('=').append(JodaBeanUtils.toString(getRows()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code TradeResultsGrid}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code rows} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<TradeResults>> rows = DirectMetaProperty.ofImmutable(
        this, "rows", TradeResultsGrid.class, (Class) List.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "rows");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3506649:  // rows
          return rows;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public TradeResultsGrid.Builder builder() {
      return new TradeResultsGrid.Builder();
    }

    @Override
    public Class<? extends TradeResultsGrid> beanType() {
      return TradeResultsGrid.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code rows} property.
     * @return the meta-property, not null
     */
    public MetaProperty<List<TradeResults>> rows() {
      return rows;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3506649:  // rows
          return ((TradeResultsGrid) bean).getRows();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code TradeResultsGrid}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<TradeResultsGrid> {

    private List<TradeResults> rows = ImmutableList.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(TradeResultsGrid beanToCopy) {
      this.rows = ImmutableList.copyOf(beanToCopy.getRows());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3506649:  // rows
          return rows;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3506649:  // rows
          this.rows = (List<TradeResults>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public TradeResultsGrid build() {
      return new TradeResultsGrid(
          rows);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code rows} property in the builder.
     * @param rows  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder rows(List<TradeResults> rows) {
      JodaBeanUtils.notNull(rows, "rows");
      this.rows = rows;
      return this;
    }

    /**
     * Sets the {@code rows} property in the builder
     * from an array of objects.
     * @param rows  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder rows(TradeResults... rows) {
      return rows(ImmutableList.copyOf(rows));
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("TradeResultsGrid.Builder{");
      buf.append("rows").append('=').append(JodaBeanUtils.toString(rows));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
