/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.engine.config;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.opengamma.strata.engine.calculations.VectorEngineFunction;

/**
 * Configuration that defines how a calculation should be performed. This includes the model, the model parameters
 * and the pricing parameters.
 */
@BeanDefinition
public final class EngineFunctionConfig implements ImmutableBean {

  private static final Logger log = LoggerFactory.getLogger(EngineFunctionConfig.class);

  /**
   * Default configuration used when there is none available for a target. Creates {@link MissingConfigEngineFunction}.
   */
  public static final EngineFunctionConfig DEFAULT =
      EngineFunctionConfig.builder().functionType(MissingConfigEngineFunction.class).build();

  // TODO This will have to support ScalarEngineFunction at some point
  @PropertyDefinition(validate = "notNull")
  private final Class<? extends VectorEngineFunction<?, ?>> functionType;

  // TODO Metadata? Risk measures, name, model name, description, parameters

  public VectorEngineFunction<?, ?> createFunction() {
    try {
      return functionType.newInstance();
    } catch (InstantiationException | IllegalAccessException e) {
      log.warn("Failed to create engine function", e);
      return new MissingConfigEngineFunction();
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code EngineFunctionConfig}.
   * @return the meta-bean, not null
   */
  public static EngineFunctionConfig.Meta meta() {
    return EngineFunctionConfig.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(EngineFunctionConfig.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static EngineFunctionConfig.Builder builder() {
    return new EngineFunctionConfig.Builder();
  }

  private EngineFunctionConfig(
      Class<? extends VectorEngineFunction<?, ?>> functionType) {
    JodaBeanUtils.notNull(functionType, "functionType");
    this.functionType = functionType;
  }

  @Override
  public EngineFunctionConfig.Meta metaBean() {
    return EngineFunctionConfig.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the functionType.
   * @return the value of the property, not null
   */
  public Class<? extends VectorEngineFunction<?, ?>> getFunctionType() {
    return functionType;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      EngineFunctionConfig other = (EngineFunctionConfig) obj;
      return JodaBeanUtils.equal(getFunctionType(), other.getFunctionType());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getFunctionType());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("EngineFunctionConfig{");
    buf.append("functionType").append('=').append(JodaBeanUtils.toString(getFunctionType()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code EngineFunctionConfig}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code functionType} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Class<? extends VectorEngineFunction<?, ?>>> functionType = DirectMetaProperty.ofImmutable(
        this, "functionType", EngineFunctionConfig.class, (Class) Class.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "functionType");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -211170510:  // functionType
          return functionType;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public EngineFunctionConfig.Builder builder() {
      return new EngineFunctionConfig.Builder();
    }

    @Override
    public Class<? extends EngineFunctionConfig> beanType() {
      return EngineFunctionConfig.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code functionType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Class<? extends VectorEngineFunction<?, ?>>> functionType() {
      return functionType;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -211170510:  // functionType
          return ((EngineFunctionConfig) bean).getFunctionType();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code EngineFunctionConfig}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<EngineFunctionConfig> {

    private Class<? extends VectorEngineFunction<?, ?>> functionType;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(EngineFunctionConfig beanToCopy) {
      this.functionType = beanToCopy.getFunctionType();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -211170510:  // functionType
          return functionType;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -211170510:  // functionType
          this.functionType = (Class<? extends VectorEngineFunction<?, ?>>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public EngineFunctionConfig build() {
      return new EngineFunctionConfig(
          functionType);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code functionType} property in the builder.
     * @param functionType  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder functionType(Class<? extends VectorEngineFunction<?, ?>> functionType) {
      JodaBeanUtils.notNull(functionType, "functionType");
      this.functionType = functionType;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("EngineFunctionConfig.Builder{");
      buf.append("functionType").append('=').append(JodaBeanUtils.toString(functionType));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
