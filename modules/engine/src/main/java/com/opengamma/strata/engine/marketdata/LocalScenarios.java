/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.engine.marketdata;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.opengamma.strata.engine.marketdata.scenarios.CellKey;

/**
 *
 */
@BeanDefinition
public final class LocalScenarios implements ImmutableBean {

  private static final LocalScenarios EMPTY = new LocalScenarios(ImmutableList.of(), ImmutableMap.of());

  /** . */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableList<ScenarioCalculationEnvironment> scenarioMarketData;

  /** . */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<CellKey, ImmutableList<Integer>> cellScenarioMarketData;

  public static LocalScenarios empty() {
    return EMPTY;
  }

  public ScenarioCalculationEnvironment getScenarioMarketData(int rowIndex, int columnIndex, int scenarioIndex) {
    CellKey key = CellKey.of(rowIndex, columnIndex);
    ImmutableList<Integer> scenarioIndices = cellScenarioMarketData.get(key);

    if (scenarioIndices == null) {
      // TODO Message
      throw new IllegalArgumentException();
    }
    if (scenarioIndices.size() < scenarioIndex - 1) {
      // TODO Message
      throw new IllegalArgumentException();
    }
    int index = scenarioIndices.get(scenarioIndex);
    return scenarioMarketData.get(index);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code LocalScenarios}.
   * @return the meta-bean, not null
   */
  public static LocalScenarios.Meta meta() {
    return LocalScenarios.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(LocalScenarios.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static LocalScenarios.Builder builder() {
    return new LocalScenarios.Builder();
  }

  private LocalScenarios(
      List<ScenarioCalculationEnvironment> scenarioMarketData,
      Map<CellKey, ImmutableList<Integer>> cellScenarioMarketData) {
    JodaBeanUtils.notNull(scenarioMarketData, "scenarioMarketData");
    JodaBeanUtils.notNull(cellScenarioMarketData, "cellScenarioMarketData");
    this.scenarioMarketData = ImmutableList.copyOf(scenarioMarketData);
    this.cellScenarioMarketData = ImmutableMap.copyOf(cellScenarioMarketData);
  }

  @Override
  public LocalScenarios.Meta metaBean() {
    return LocalScenarios.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets .
   * @return the value of the property, not null
   */
  public ImmutableList<ScenarioCalculationEnvironment> getScenarioMarketData() {
    return scenarioMarketData;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets .
   * @return the value of the property, not null
   */
  public ImmutableMap<CellKey, ImmutableList<Integer>> getCellScenarioMarketData() {
    return cellScenarioMarketData;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      LocalScenarios other = (LocalScenarios) obj;
      return JodaBeanUtils.equal(getScenarioMarketData(), other.getScenarioMarketData()) &&
          JodaBeanUtils.equal(getCellScenarioMarketData(), other.getCellScenarioMarketData());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getScenarioMarketData());
    hash = hash * 31 + JodaBeanUtils.hashCode(getCellScenarioMarketData());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("LocalScenarios{");
    buf.append("scenarioMarketData").append('=').append(getScenarioMarketData()).append(',').append(' ');
    buf.append("cellScenarioMarketData").append('=').append(JodaBeanUtils.toString(getCellScenarioMarketData()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code LocalScenarios}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code scenarioMarketData} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<ScenarioCalculationEnvironment>> scenarioMarketData = DirectMetaProperty.ofImmutable(
        this, "scenarioMarketData", LocalScenarios.class, (Class) ImmutableList.class);
    /**
     * The meta-property for the {@code cellScenarioMarketData} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<CellKey, ImmutableList<Integer>>> cellScenarioMarketData = DirectMetaProperty.ofImmutable(
        this, "cellScenarioMarketData", LocalScenarios.class, (Class) ImmutableMap.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "scenarioMarketData",
        "cellScenarioMarketData");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1440257462:  // scenarioMarketData
          return scenarioMarketData;
        case 1037305528:  // cellScenarioMarketData
          return cellScenarioMarketData;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public LocalScenarios.Builder builder() {
      return new LocalScenarios.Builder();
    }

    @Override
    public Class<? extends LocalScenarios> beanType() {
      return LocalScenarios.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code scenarioMarketData} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<ScenarioCalculationEnvironment>> scenarioMarketData() {
      return scenarioMarketData;
    }

    /**
     * The meta-property for the {@code cellScenarioMarketData} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMap<CellKey, ImmutableList<Integer>>> cellScenarioMarketData() {
      return cellScenarioMarketData;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1440257462:  // scenarioMarketData
          return ((LocalScenarios) bean).getScenarioMarketData();
        case 1037305528:  // cellScenarioMarketData
          return ((LocalScenarios) bean).getCellScenarioMarketData();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code LocalScenarios}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<LocalScenarios> {

    private List<ScenarioCalculationEnvironment> scenarioMarketData = ImmutableList.of();
    private Map<CellKey, ImmutableList<Integer>> cellScenarioMarketData = ImmutableMap.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(LocalScenarios beanToCopy) {
      this.scenarioMarketData = beanToCopy.getScenarioMarketData();
      this.cellScenarioMarketData = beanToCopy.getCellScenarioMarketData();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1440257462:  // scenarioMarketData
          return scenarioMarketData;
        case 1037305528:  // cellScenarioMarketData
          return cellScenarioMarketData;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1440257462:  // scenarioMarketData
          this.scenarioMarketData = (List<ScenarioCalculationEnvironment>) newValue;
          break;
        case 1037305528:  // cellScenarioMarketData
          this.cellScenarioMarketData = (Map<CellKey, ImmutableList<Integer>>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public LocalScenarios build() {
      return new LocalScenarios(
          scenarioMarketData,
          cellScenarioMarketData);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code scenarioMarketData} property in the builder.
     * @param scenarioMarketData  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder scenarioMarketData(List<ScenarioCalculationEnvironment> scenarioMarketData) {
      JodaBeanUtils.notNull(scenarioMarketData, "scenarioMarketData");
      this.scenarioMarketData = scenarioMarketData;
      return this;
    }

    /**
     * Sets the {@code scenarioMarketData} property in the builder
     * from an array of objects.
     * @param scenarioMarketData  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder scenarioMarketData(ScenarioCalculationEnvironment... scenarioMarketData) {
      return scenarioMarketData(ImmutableList.copyOf(scenarioMarketData));
    }

    /**
     * Sets the {@code cellScenarioMarketData} property in the builder.
     * @param cellScenarioMarketData  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder cellScenarioMarketData(Map<CellKey, ImmutableList<Integer>> cellScenarioMarketData) {
      JodaBeanUtils.notNull(cellScenarioMarketData, "cellScenarioMarketData");
      this.cellScenarioMarketData = cellScenarioMarketData;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("LocalScenarios.Builder{");
      buf.append("scenarioMarketData").append('=').append(JodaBeanUtils.toString(scenarioMarketData)).append(',').append(' ');
      buf.append("cellScenarioMarketData").append('=').append(JodaBeanUtils.toString(cellScenarioMarketData));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
