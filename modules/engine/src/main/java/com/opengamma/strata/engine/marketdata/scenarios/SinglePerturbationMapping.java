/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.engine.marketdata.scenarios;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.market.MarketDataId;

/**
 *
 */
//@BeanDefinition // Removed so bean is not regenerated. See https://github.com/JodaOrg/joda-beans/issues/110
public final class SinglePerturbationMapping<T, I extends MarketDataId<T>> implements ImmutableBean {

  /** The filter which decides whether the perturbation should be applied to an item of market data. */
  @PropertyDefinition(validate = "notNull")
  private final MarketDataFilter<T, I> filter;

  /** The perturbation which applies a shock to an item of market data. */
  @PropertyDefinition(validate = "notNull")
  private final Perturbation<T> perturbation;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SinglePerturbationMapping}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("rawtypes")
  public static SinglePerturbationMapping.Meta meta() {
    return SinglePerturbationMapping.Meta.INSTANCE;
  }

  /**
   * The meta-bean for {@code SinglePerturbationMapping}.
   * @param <R>  the first generic type
   * @param <S>  the second generic type
   * @param cls1  the first generic type
   * @param cls2  the second generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R, S extends MarketDataId<R>> SinglePerturbationMapping.Meta<R, S> metaSinglePerturbationMapping(Class<R> cls1, Class<S> cls2) {
    return SinglePerturbationMapping.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(SinglePerturbationMapping.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @param <T>  the type
   * @param <I>  the type
   * @return the builder, not null
   */
  public static <T, I extends MarketDataId<T>> SinglePerturbationMapping.Builder<T, I> builder() {
    return new SinglePerturbationMapping.Builder<T, I>();
  }

  private SinglePerturbationMapping(
      MarketDataFilter<T, I> filter,
      Perturbation<T> perturbation) {
    JodaBeanUtils.notNull(filter, "filter");
    JodaBeanUtils.notNull(perturbation, "perturbation");
    this.filter = filter;
    this.perturbation = perturbation;
  }

  @SuppressWarnings("unchecked")
  @Override
  public SinglePerturbationMapping.Meta<T, I> metaBean() {
    return SinglePerturbationMapping.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the filter which decides whether the perturbation should be applied to an item of market data.
   * @return the value of the property, not null
   */
  public MarketDataFilter<T, I> getFilter() {
    return filter;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the perturbation which applies a shock to an item of market data.
   * @return the value of the property, not null
   */
  public Perturbation<T> getPerturbation() {
    return perturbation;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder<T, I> toBuilder() {
    return new Builder<T, I>(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      SinglePerturbationMapping<?, ?> other = (SinglePerturbationMapping<?, ?>) obj;
      return JodaBeanUtils.equal(getFilter(), other.getFilter()) &&
          JodaBeanUtils.equal(getPerturbation(), other.getPerturbation());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getFilter());
    hash = hash * 31 + JodaBeanUtils.hashCode(getPerturbation());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("SinglePerturbationMapping{");
    buf.append("filter").append('=').append(getFilter()).append(',').append(' ');
    buf.append("perturbation").append('=').append(JodaBeanUtils.toString(getPerturbation()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SinglePerturbationMapping}.
   * @param <T>  the type
   * @param <I>  the type
   */
  public static final class Meta<T, I extends MarketDataId<T>> extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code filter} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<MarketDataFilter<T, I>> filter = DirectMetaProperty.ofImmutable(
        this, "filter", SinglePerturbationMapping.class, (Class) MarketDataFilter.class);
    /**
     * The meta-property for the {@code perturbation} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Perturbation<T>> perturbation = DirectMetaProperty.ofImmutable(
        this, "perturbation", SinglePerturbationMapping.class, (Class) Perturbation.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "filter",
        "perturbation");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1274492040:  // filter
          return filter;
        case -924739417:  // perturbation
          return perturbation;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public SinglePerturbationMapping.Builder<T, I> builder() {
      return new SinglePerturbationMapping.Builder<T, I>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends SinglePerturbationMapping<T, I>> beanType() {
      return (Class) SinglePerturbationMapping.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code filter} property.
     * @return the meta-property, not null
     */
    public MetaProperty<MarketDataFilter<T, I>> filter() {
      return filter;
    }

    /**
     * The meta-property for the {@code perturbation} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Perturbation<T>> perturbation() {
      return perturbation;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1274492040:  // filter
          return ((SinglePerturbationMapping<?, ?>) bean).getFilter();
        case -924739417:  // perturbation
          return ((SinglePerturbationMapping<?, ?>) bean).getPerturbation();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code SinglePerturbationMapping}.
   * @param <T>  the type
   * @param <I>  the type
   */
  public static final class Builder<T, I extends MarketDataId<T>> extends DirectFieldsBeanBuilder<SinglePerturbationMapping<T, I>> {

    private MarketDataFilter<T, I> filter;
    private Perturbation<T> perturbation;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(SinglePerturbationMapping<T, I> beanToCopy) {
      this.filter = beanToCopy.getFilter();
      this.perturbation = beanToCopy.getPerturbation();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1274492040:  // filter
          return filter;
        case -924739417:  // perturbation
          return perturbation;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder<T, I> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1274492040:  // filter
          this.filter = (MarketDataFilter<T, I>) newValue;
          break;
        case -924739417:  // perturbation
          this.perturbation = (Perturbation<T>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder<T, I> set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<T, I> setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder<T, I> setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder<T, I> setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public SinglePerturbationMapping<T, I> build() {
      return new SinglePerturbationMapping<T, I>(
          filter,
          perturbation);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code filter} property in the builder.
     * @param filter  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<T, I> filter(MarketDataFilter<T, I> filter) {
      JodaBeanUtils.notNull(filter, "filter");
      this.filter = filter;
      return this;
    }

    /**
     * Sets the {@code perturbation} property in the builder.
     * @param perturbation  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<T, I> perturbation(Perturbation<T> perturbation) {
      JodaBeanUtils.notNull(perturbation, "perturbation");
      this.perturbation = perturbation;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("SinglePerturbationMapping.Builder{");
      buf.append("filter").append('=').append(JodaBeanUtils.toString(filter)).append(',').append(' ');
      buf.append("perturbation").append('=').append(JodaBeanUtils.toString(perturbation));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
