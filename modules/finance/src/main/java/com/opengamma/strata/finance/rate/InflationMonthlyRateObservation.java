package com.opengamma.strata.finance.rate;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableValidator;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.index.Index;
import com.opengamma.strata.basics.index.PriceIndex;
import com.opengamma.strata.basics.index.PriceIndices;
import com.opengamma.strata.collect.ArgChecker;

/**
 * Defines the observation of inflation figures from a price index.
 * <p>
 * The reference index is the price index of a month linked to the payment date.   
 * The most common implementations of price indexes are provided in {@link PriceIndices}.
 */
@BeanDefinition
public final class InflationMonthlyRateObservation
    implements RateObservation, ImmutableBean, Serializable {

  /**
   * The day count convention applicable.
   * <p>
   * This is used to convert dates to a numerical value.
   * <p>
   * When building, this will default to the day count of the index if not specified.
   */
  @PropertyDefinition(validate = "notNull")
  private final PriceIndex index;
  /**
   * The reference date for the index at the coupon start. 
   * <p>
   * This is not relevant if the index value is known.
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate referenceStartDate;
  /**
   * The reference date for the index at the coupon end. 
   * <p>
   * This is the first of the month. 
   * There is usually a difference of two or three month between the reference date and the payment date.
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate referenceEndDate;

  /**
   * Creates an {@code InflationMonthlyRateObservation} from an index, reference start date and reference end date.
   * @param index The index
   * @param referenceStartDate The reference start date. 
   * @param referenceEndDate The reference end date. 
   * @return The inflation rate observation
   */
  public static InflationMonthlyRateObservation of(
      PriceIndex index,
      LocalDate referenceStartDate,
      LocalDate referenceEndDate) {
    return InflationMonthlyRateObservation.builder()
        .index(index)
        .referenceStartDate(referenceStartDate)
        .referenceEndDate(referenceEndDate)
        .build();
  }

  @ImmutableValidator
  private void validate() {
    ArgChecker.inOrderNotEqual(referenceStartDate, referenceEndDate, "referenceStartDate", "referenceEndDate");
  }

  @Override
  public void collectIndices(com.google.common.collect.ImmutableSet.Builder<Index> builder) {
    builder.add(index);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code InflationMonthlyRateObservation}.
   * @return the meta-bean, not null
   */
  public static InflationMonthlyRateObservation.Meta meta() {
    return InflationMonthlyRateObservation.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(InflationMonthlyRateObservation.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static InflationMonthlyRateObservation.Builder builder() {
    return new InflationMonthlyRateObservation.Builder();
  }

  private InflationMonthlyRateObservation(
      PriceIndex index,
      LocalDate referenceStartDate,
      LocalDate referenceEndDate) {
    JodaBeanUtils.notNull(index, "index");
    JodaBeanUtils.notNull(referenceStartDate, "referenceStartDate");
    JodaBeanUtils.notNull(referenceEndDate, "referenceEndDate");
    this.index = index;
    this.referenceStartDate = referenceStartDate;
    this.referenceEndDate = referenceEndDate;
    validate();
  }

  @Override
  public InflationMonthlyRateObservation.Meta metaBean() {
    return InflationMonthlyRateObservation.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the day count convention applicable.
   * <p>
   * This is used to convert dates to a numerical value.
   * <p>
   * When building, this will default to the day count of the index if not specified.
   * @return the value of the property, not null
   */
  public PriceIndex getIndex() {
    return index;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the reference date for the index at the coupon start.
   * <p>
   * This is not relevant if the index value is known.
   * @return the value of the property, not null
   */
  public LocalDate getReferenceStartDate() {
    return referenceStartDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the reference date for the index at the coupon end.
   * <p>
   * This is the first of the month.
   * There is usually a difference of two or three month between the reference date and the payment date.
   * @return the value of the property, not null
   */
  public LocalDate getReferenceEndDate() {
    return referenceEndDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      InflationMonthlyRateObservation other = (InflationMonthlyRateObservation) obj;
      return JodaBeanUtils.equal(getIndex(), other.getIndex()) &&
          JodaBeanUtils.equal(getReferenceStartDate(), other.getReferenceStartDate()) &&
          JodaBeanUtils.equal(getReferenceEndDate(), other.getReferenceEndDate());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getIndex());
    hash = hash * 31 + JodaBeanUtils.hashCode(getReferenceStartDate());
    hash = hash * 31 + JodaBeanUtils.hashCode(getReferenceEndDate());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("InflationMonthlyRateObservation{");
    buf.append("index").append('=').append(getIndex()).append(',').append(' ');
    buf.append("referenceStartDate").append('=').append(getReferenceStartDate()).append(',').append(' ');
    buf.append("referenceEndDate").append('=').append(JodaBeanUtils.toString(getReferenceEndDate()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code InflationMonthlyRateObservation}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code index} property.
     */
    private final MetaProperty<PriceIndex> index = DirectMetaProperty.ofImmutable(
        this, "index", InflationMonthlyRateObservation.class, PriceIndex.class);
    /**
     * The meta-property for the {@code referenceStartDate} property.
     */
    private final MetaProperty<LocalDate> referenceStartDate = DirectMetaProperty.ofImmutable(
        this, "referenceStartDate", InflationMonthlyRateObservation.class, LocalDate.class);
    /**
     * The meta-property for the {@code referenceEndDate} property.
     */
    private final MetaProperty<LocalDate> referenceEndDate = DirectMetaProperty.ofImmutable(
        this, "referenceEndDate", InflationMonthlyRateObservation.class, LocalDate.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "index",
        "referenceStartDate",
        "referenceEndDate");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          return index;
        case -1704981467:  // referenceStartDate
          return referenceStartDate;
        case 1999414622:  // referenceEndDate
          return referenceEndDate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public InflationMonthlyRateObservation.Builder builder() {
      return new InflationMonthlyRateObservation.Builder();
    }

    @Override
    public Class<? extends InflationMonthlyRateObservation> beanType() {
      return InflationMonthlyRateObservation.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code index} property.
     * @return the meta-property, not null
     */
    public MetaProperty<PriceIndex> index() {
      return index;
    }

    /**
     * The meta-property for the {@code referenceStartDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> referenceStartDate() {
      return referenceStartDate;
    }

    /**
     * The meta-property for the {@code referenceEndDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> referenceEndDate() {
      return referenceEndDate;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          return ((InflationMonthlyRateObservation) bean).getIndex();
        case -1704981467:  // referenceStartDate
          return ((InflationMonthlyRateObservation) bean).getReferenceStartDate();
        case 1999414622:  // referenceEndDate
          return ((InflationMonthlyRateObservation) bean).getReferenceEndDate();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code InflationMonthlyRateObservation}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<InflationMonthlyRateObservation> {

    private PriceIndex index;
    private LocalDate referenceStartDate;
    private LocalDate referenceEndDate;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(InflationMonthlyRateObservation beanToCopy) {
      this.index = beanToCopy.getIndex();
      this.referenceStartDate = beanToCopy.getReferenceStartDate();
      this.referenceEndDate = beanToCopy.getReferenceEndDate();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          return index;
        case -1704981467:  // referenceStartDate
          return referenceStartDate;
        case 1999414622:  // referenceEndDate
          return referenceEndDate;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          this.index = (PriceIndex) newValue;
          break;
        case -1704981467:  // referenceStartDate
          this.referenceStartDate = (LocalDate) newValue;
          break;
        case 1999414622:  // referenceEndDate
          this.referenceEndDate = (LocalDate) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public InflationMonthlyRateObservation build() {
      return new InflationMonthlyRateObservation(
          index,
          referenceStartDate,
          referenceEndDate);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code index} property in the builder.
     * @param index  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder index(PriceIndex index) {
      JodaBeanUtils.notNull(index, "index");
      this.index = index;
      return this;
    }

    /**
     * Sets the {@code referenceStartDate} property in the builder.
     * @param referenceStartDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder referenceStartDate(LocalDate referenceStartDate) {
      JodaBeanUtils.notNull(referenceStartDate, "referenceStartDate");
      this.referenceStartDate = referenceStartDate;
      return this;
    }

    /**
     * Sets the {@code referenceEndDate} property in the builder.
     * @param referenceEndDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder referenceEndDate(LocalDate referenceEndDate) {
      JodaBeanUtils.notNull(referenceEndDate, "referenceEndDate");
      this.referenceEndDate = referenceEndDate;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("InflationMonthlyRateObservation.Builder{");
      buf.append("index").append('=').append(JodaBeanUtils.toString(index)).append(',').append(' ');
      buf.append("referenceStartDate").append('=').append(JodaBeanUtils.toString(referenceStartDate)).append(',').append(' ');
      buf.append("referenceEndDate").append('=').append(JodaBeanUtils.toString(referenceEndDate));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
