/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 * <p>
 * Please see distribution for license.
 */
package com.opengamma.strata.finance.credit.general;

import com.opengamma.strata.basics.BuySell;
import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.basics.date.BusinessDayAdjustment;
import com.opengamma.strata.collect.id.StandardId;
import com.opengamma.strata.finance.credit.RestructuringClause;
import com.opengamma.strata.finance.credit.SeniorityLevel;
import com.opengamma.strata.finance.credit.general.reference.IndexReferenceInformation;
import com.opengamma.strata.finance.credit.general.reference.ReferenceInformation;
import com.opengamma.strata.finance.credit.general.reference.SingleNameReferenceInformation;
import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

/**
 * This element contains all the data that appears in the section entitled "1. General Terms"
 * in the 2003 ISDA Credit Derivatives Confirmation
 */
@BeanDefinition
public final class GeneralTerms
    implements ImmutableBean, Serializable {

  /**
   * The first day of the term of the trade. This day may be subject to adjustment in accordance
   * with a business day convention. ISDA 2003 Term: Effective Date
   *
   * This is typically the previous cds (qtr on 20th) date before trade date, adjusted.
   */
  @PropertyDefinition(validate = "notNull")
  final LocalDate startDate;

  /**
   * The scheduled date on which the credit protection will lapse. This day may be subject to
   * adjustment in accordance with a business day convention. ISDA 2003 Term: Scheduled Termination Date.
   *
   * This is typically an unadjusted cds date.
   */
  @PropertyDefinition(validate = "notNull")
  final LocalDate endDate;

  /**
   * Indicator of whether we are buying or selling protection
   * Buy means we are paying the fee leg payments and buying the protection
   * Sell means we are receiving the fee leg payments and selling the protection
   */
  @PropertyDefinition(validate = "notNull")
  final BuySell buySellProtection;

  /**
   * ISDA 2003 Terms: Business Day and Business Day Convention
   */
  @PropertyDefinition(validate = "notNull")
  final BusinessDayAdjustment businessDayAdjustment;

  /**
   * Contains information on reference entity/issue for single name or
   * index information for index trades
   */
  @PropertyDefinition(validate = "notNull")
  final ReferenceInformation referenceInformation;

  public static GeneralTerms singleName(
      LocalDate effectiveDate,
      LocalDate scheduledTerminationDate,
      BuySell buySellProtection,
      BusinessDayAdjustment businessDayAdjustment,
      StandardId referenceEntityId,
      Currency currency,
      SeniorityLevel seniority,
      RestructuringClause restructuringClause
      ) {
    return of(
        effectiveDate,
        scheduledTerminationDate,
        buySellProtection,
        businessDayAdjustment,
        SingleNameReferenceInformation.of(
            referenceEntityId,
            seniority,
            currency,
            restructuringClause
        )
    );
  }

  public static GeneralTerms index(
      LocalDate effectiveDate,
      LocalDate scheduledTerminationDate,
      BuySell buySellProtection,
      BusinessDayAdjustment businessDayAdjustment,
      StandardId indexId,
      int indexSeries,
      int indexAnnexVersion,
      RestructuringClause restructuringClause
  ) {
    return of(
        effectiveDate,
        scheduledTerminationDate,
        buySellProtection,
        businessDayAdjustment,
        IndexReferenceInformation.of(
            indexId,
            indexSeries,
            indexAnnexVersion,
            restructuringClause
        )
    );
  }


  public static GeneralTerms of(
      LocalDate effectiveDate,
      LocalDate scheduledTerminationDate,
      BuySell buySellProtection,
      BusinessDayAdjustment businessDayAdjustment,
      ReferenceInformation referenceInformation
  ) {
    return new GeneralTerms(
        effectiveDate,
        scheduledTerminationDate,
        buySellProtection,
        businessDayAdjustment,
        referenceInformation
    );
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code GeneralTerms}.
   * @return the meta-bean, not null
   */
  public static GeneralTerms.Meta meta() {
    return GeneralTerms.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(GeneralTerms.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static GeneralTerms.Builder builder() {
    return new GeneralTerms.Builder();
  }

  private GeneralTerms(
      LocalDate startDate,
      LocalDate endDate,
      BuySell buySellProtection,
      BusinessDayAdjustment businessDayAdjustment,
      ReferenceInformation referenceInformation) {
    JodaBeanUtils.notNull(startDate, "startDate");
    JodaBeanUtils.notNull(endDate, "endDate");
    JodaBeanUtils.notNull(buySellProtection, "buySellProtection");
    JodaBeanUtils.notNull(businessDayAdjustment, "businessDayAdjustment");
    JodaBeanUtils.notNull(referenceInformation, "referenceInformation");
    this.startDate = startDate;
    this.endDate = endDate;
    this.buySellProtection = buySellProtection;
    this.businessDayAdjustment = businessDayAdjustment;
    this.referenceInformation = referenceInformation;
  }

  @Override
  public GeneralTerms.Meta metaBean() {
    return GeneralTerms.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the first day of the term of the trade. This day may be subject to adjustment in accordance
   * with a business day convention. ISDA 2003 Term: Effective Date
   * 
   * This is typically the previous cds (qtr on 20th) date before trade date, adjusted.
   * @return the value of the property, not null
   */
  public LocalDate getStartDate() {
    return startDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the scheduled date on which the credit protection will lapse. This day may be subject to
   * adjustment in accordance with a business day convention. ISDA 2003 Term: Scheduled Termination Date.
   * 
   * This is typically an unadjusted cds date.
   * @return the value of the property, not null
   */
  public LocalDate getEndDate() {
    return endDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets indicator of whether we are buying or selling protection
   * Buy means we are paying the fee leg payments and buying the protection
   * Sell means we are receiving the fee leg payments and selling the protection
   * @return the value of the property, not null
   */
  public BuySell getBuySellProtection() {
    return buySellProtection;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets iSDA 2003 Terms: Business Day and Business Day Convention
   * @return the value of the property, not null
   */
  public BusinessDayAdjustment getBusinessDayAdjustment() {
    return businessDayAdjustment;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets contains information on reference entity/issue for single name or
   * index information for index trades
   * @return the value of the property, not null
   */
  public ReferenceInformation getReferenceInformation() {
    return referenceInformation;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      GeneralTerms other = (GeneralTerms) obj;
      return JodaBeanUtils.equal(getStartDate(), other.getStartDate()) &&
          JodaBeanUtils.equal(getEndDate(), other.getEndDate()) &&
          JodaBeanUtils.equal(getBuySellProtection(), other.getBuySellProtection()) &&
          JodaBeanUtils.equal(getBusinessDayAdjustment(), other.getBusinessDayAdjustment()) &&
          JodaBeanUtils.equal(getReferenceInformation(), other.getReferenceInformation());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getStartDate());
    hash = hash * 31 + JodaBeanUtils.hashCode(getEndDate());
    hash = hash * 31 + JodaBeanUtils.hashCode(getBuySellProtection());
    hash = hash * 31 + JodaBeanUtils.hashCode(getBusinessDayAdjustment());
    hash = hash * 31 + JodaBeanUtils.hashCode(getReferenceInformation());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(192);
    buf.append("GeneralTerms{");
    buf.append("startDate").append('=').append(getStartDate()).append(',').append(' ');
    buf.append("endDate").append('=').append(getEndDate()).append(',').append(' ');
    buf.append("buySellProtection").append('=').append(getBuySellProtection()).append(',').append(' ');
    buf.append("businessDayAdjustment").append('=').append(getBusinessDayAdjustment()).append(',').append(' ');
    buf.append("referenceInformation").append('=').append(JodaBeanUtils.toString(getReferenceInformation()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code GeneralTerms}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code startDate} property.
     */
    private final MetaProperty<LocalDate> startDate = DirectMetaProperty.ofImmutable(
        this, "startDate", GeneralTerms.class, LocalDate.class);
    /**
     * The meta-property for the {@code endDate} property.
     */
    private final MetaProperty<LocalDate> endDate = DirectMetaProperty.ofImmutable(
        this, "endDate", GeneralTerms.class, LocalDate.class);
    /**
     * The meta-property for the {@code buySellProtection} property.
     */
    private final MetaProperty<BuySell> buySellProtection = DirectMetaProperty.ofImmutable(
        this, "buySellProtection", GeneralTerms.class, BuySell.class);
    /**
     * The meta-property for the {@code businessDayAdjustment} property.
     */
    private final MetaProperty<BusinessDayAdjustment> businessDayAdjustment = DirectMetaProperty.ofImmutable(
        this, "businessDayAdjustment", GeneralTerms.class, BusinessDayAdjustment.class);
    /**
     * The meta-property for the {@code referenceInformation} property.
     */
    private final MetaProperty<ReferenceInformation> referenceInformation = DirectMetaProperty.ofImmutable(
        this, "referenceInformation", GeneralTerms.class, ReferenceInformation.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "startDate",
        "endDate",
        "buySellProtection",
        "businessDayAdjustment",
        "referenceInformation");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -2129778896:  // startDate
          return startDate;
        case -1607727319:  // endDate
          return endDate;
        case -405622799:  // buySellProtection
          return buySellProtection;
        case -1065319863:  // businessDayAdjustment
          return businessDayAdjustment;
        case -2117930783:  // referenceInformation
          return referenceInformation;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public GeneralTerms.Builder builder() {
      return new GeneralTerms.Builder();
    }

    @Override
    public Class<? extends GeneralTerms> beanType() {
      return GeneralTerms.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code startDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> startDate() {
      return startDate;
    }

    /**
     * The meta-property for the {@code endDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> endDate() {
      return endDate;
    }

    /**
     * The meta-property for the {@code buySellProtection} property.
     * @return the meta-property, not null
     */
    public MetaProperty<BuySell> buySellProtection() {
      return buySellProtection;
    }

    /**
     * The meta-property for the {@code businessDayAdjustment} property.
     * @return the meta-property, not null
     */
    public MetaProperty<BusinessDayAdjustment> businessDayAdjustment() {
      return businessDayAdjustment;
    }

    /**
     * The meta-property for the {@code referenceInformation} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ReferenceInformation> referenceInformation() {
      return referenceInformation;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -2129778896:  // startDate
          return ((GeneralTerms) bean).getStartDate();
        case -1607727319:  // endDate
          return ((GeneralTerms) bean).getEndDate();
        case -405622799:  // buySellProtection
          return ((GeneralTerms) bean).getBuySellProtection();
        case -1065319863:  // businessDayAdjustment
          return ((GeneralTerms) bean).getBusinessDayAdjustment();
        case -2117930783:  // referenceInformation
          return ((GeneralTerms) bean).getReferenceInformation();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code GeneralTerms}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<GeneralTerms> {

    private LocalDate startDate;
    private LocalDate endDate;
    private BuySell buySellProtection;
    private BusinessDayAdjustment businessDayAdjustment;
    private ReferenceInformation referenceInformation;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(GeneralTerms beanToCopy) {
      this.startDate = beanToCopy.getStartDate();
      this.endDate = beanToCopy.getEndDate();
      this.buySellProtection = beanToCopy.getBuySellProtection();
      this.businessDayAdjustment = beanToCopy.getBusinessDayAdjustment();
      this.referenceInformation = beanToCopy.getReferenceInformation();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -2129778896:  // startDate
          return startDate;
        case -1607727319:  // endDate
          return endDate;
        case -405622799:  // buySellProtection
          return buySellProtection;
        case -1065319863:  // businessDayAdjustment
          return businessDayAdjustment;
        case -2117930783:  // referenceInformation
          return referenceInformation;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -2129778896:  // startDate
          this.startDate = (LocalDate) newValue;
          break;
        case -1607727319:  // endDate
          this.endDate = (LocalDate) newValue;
          break;
        case -405622799:  // buySellProtection
          this.buySellProtection = (BuySell) newValue;
          break;
        case -1065319863:  // businessDayAdjustment
          this.businessDayAdjustment = (BusinessDayAdjustment) newValue;
          break;
        case -2117930783:  // referenceInformation
          this.referenceInformation = (ReferenceInformation) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public GeneralTerms build() {
      return new GeneralTerms(
          startDate,
          endDate,
          buySellProtection,
          businessDayAdjustment,
          referenceInformation);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code startDate} property in the builder.
     * @param startDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder startDate(LocalDate startDate) {
      JodaBeanUtils.notNull(startDate, "startDate");
      this.startDate = startDate;
      return this;
    }

    /**
     * Sets the {@code endDate} property in the builder.
     * @param endDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder endDate(LocalDate endDate) {
      JodaBeanUtils.notNull(endDate, "endDate");
      this.endDate = endDate;
      return this;
    }

    /**
     * Sets the {@code buySellProtection} property in the builder.
     * @param buySellProtection  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder buySellProtection(BuySell buySellProtection) {
      JodaBeanUtils.notNull(buySellProtection, "buySellProtection");
      this.buySellProtection = buySellProtection;
      return this;
    }

    /**
     * Sets the {@code businessDayAdjustment} property in the builder.
     * @param businessDayAdjustment  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder businessDayAdjustment(BusinessDayAdjustment businessDayAdjustment) {
      JodaBeanUtils.notNull(businessDayAdjustment, "businessDayAdjustment");
      this.businessDayAdjustment = businessDayAdjustment;
      return this;
    }

    /**
     * Sets the {@code referenceInformation} property in the builder.
     * @param referenceInformation  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder referenceInformation(ReferenceInformation referenceInformation) {
      JodaBeanUtils.notNull(referenceInformation, "referenceInformation");
      this.referenceInformation = referenceInformation;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(192);
      buf.append("GeneralTerms.Builder{");
      buf.append("startDate").append('=').append(JodaBeanUtils.toString(startDate)).append(',').append(' ');
      buf.append("endDate").append('=').append(JodaBeanUtils.toString(endDate)).append(',').append(' ');
      buf.append("buySellProtection").append('=').append(JodaBeanUtils.toString(buySellProtection)).append(',').append(' ');
      buf.append("businessDayAdjustment").append('=').append(JodaBeanUtils.toString(businessDayAdjustment)).append(',').append(' ');
      buf.append("referenceInformation").append('=').append(JodaBeanUtils.toString(referenceInformation));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
