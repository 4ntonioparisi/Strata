package com.opengamma.strata.finance.credit.fee;

import com.opengamma.strata.basics.currency.CurrencyAmount;
import com.opengamma.strata.basics.date.DayCount;
import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

/**
 * http://www.fpml.org/spec/fpml-5-7-2-wd-2/html/pretrade/schemaDocumentation/schemas/fpml-cd-5-7_xsd/complexTypes/PeriodicPayment/fixedAmountCalculation.html
 * <p>
 * This element contains all the terms relevant to calculating a fixed amount where the fixed amount is
 * calculated by reference to a per annum fixed rate. There is no corresponding ISDA 2003 Term.
 * The equivalent is Sec 5.1 "Calculation of Fixed Amount" but this in itself is not a defined Term.
 */
@BeanDefinition
public final class FixedAmountCalculation
    implements ImmutableBean, Serializable {

  /**
   * The notional amount used in the calculation of fixed amounts where an amount is calculated on a formula basis,
   * i.e. fixed amount = fixed rate payer calculation amount x fixed rate x fixed rate day count fraction.
   * ISDA 2003 Term: Fixed Rate Payer Calculation Amount.
   */
  @PropertyDefinition(validate = "notNull")
  final CurrencyAmount calculationAmount;

  /**
   * Coupon.
   * The calculation period fixed rate. A per annum rate, expressed as a decimal.
   * A fixed rate of 5% would be represented as 0.05.
   */
  @PropertyDefinition(validate = "notNull")
  final double fixedRate;

  /**
   * The day count fraction. ISDA 2003 Term: Fixed Rate Day Count Fraction.
   */
  @PropertyDefinition(validate = "notNull")
  final DayCount dayCountFraction;

  public static FixedAmountCalculation of(
      CurrencyAmount calculationAmount,
      double fixedRate,
      DayCount dayCountFraction
  ) {
    return new FixedAmountCalculation(calculationAmount, fixedRate, dayCountFraction);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FixedAmountCalculation}.
   * @return the meta-bean, not null
   */
  public static FixedAmountCalculation.Meta meta() {
    return FixedAmountCalculation.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FixedAmountCalculation.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static FixedAmountCalculation.Builder builder() {
    return new FixedAmountCalculation.Builder();
  }

  private FixedAmountCalculation(
      CurrencyAmount calculationAmount,
      double fixedRate,
      DayCount dayCountFraction) {
    JodaBeanUtils.notNull(calculationAmount, "calculationAmount");
    JodaBeanUtils.notNull(fixedRate, "fixedRate");
    JodaBeanUtils.notNull(dayCountFraction, "dayCountFraction");
    this.calculationAmount = calculationAmount;
    this.fixedRate = fixedRate;
    this.dayCountFraction = dayCountFraction;
  }

  @Override
  public FixedAmountCalculation.Meta metaBean() {
    return FixedAmountCalculation.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the notional amount used in the calculation of fixed amounts where an amount is calculated on a formula basis,
   * i.e. fixed amount = fixed rate payer calculation amount x fixed rate x fixed rate day count fraction.
   * ISDA 2003 Term: Fixed Rate Payer Calculation Amount.
   * @return the value of the property, not null
   */
  public CurrencyAmount getCalculationAmount() {
    return calculationAmount;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets coupon.
   * The calculation period fixed rate. A per annum rate, expressed as a decimal.
   * A fixed rate of 5% would be represented as 0.05.
   * @return the value of the property, not null
   */
  public double getFixedRate() {
    return fixedRate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the day count fraction. ISDA 2003 Term: Fixed Rate Day Count Fraction.
   * @return the value of the property, not null
   */
  public DayCount getDayCountFraction() {
    return dayCountFraction;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FixedAmountCalculation other = (FixedAmountCalculation) obj;
      return JodaBeanUtils.equal(getCalculationAmount(), other.getCalculationAmount()) &&
          JodaBeanUtils.equal(getFixedRate(), other.getFixedRate()) &&
          JodaBeanUtils.equal(getDayCountFraction(), other.getDayCountFraction());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getCalculationAmount());
    hash = hash * 31 + JodaBeanUtils.hashCode(getFixedRate());
    hash = hash * 31 + JodaBeanUtils.hashCode(getDayCountFraction());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("FixedAmountCalculation{");
    buf.append("calculationAmount").append('=').append(getCalculationAmount()).append(',').append(' ');
    buf.append("fixedRate").append('=').append(getFixedRate()).append(',').append(' ');
    buf.append("dayCountFraction").append('=').append(JodaBeanUtils.toString(getDayCountFraction()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FixedAmountCalculation}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code calculationAmount} property.
     */
    private final MetaProperty<CurrencyAmount> calculationAmount = DirectMetaProperty.ofImmutable(
        this, "calculationAmount", FixedAmountCalculation.class, CurrencyAmount.class);
    /**
     * The meta-property for the {@code fixedRate} property.
     */
    private final MetaProperty<Double> fixedRate = DirectMetaProperty.ofImmutable(
        this, "fixedRate", FixedAmountCalculation.class, Double.TYPE);
    /**
     * The meta-property for the {@code dayCountFraction} property.
     */
    private final MetaProperty<DayCount> dayCountFraction = DirectMetaProperty.ofImmutable(
        this, "dayCountFraction", FixedAmountCalculation.class, DayCount.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "calculationAmount",
        "fixedRate",
        "dayCountFraction");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1389305985:  // calculationAmount
          return calculationAmount;
        case 747425396:  // fixedRate
          return fixedRate;
        case -2120064523:  // dayCountFraction
          return dayCountFraction;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public FixedAmountCalculation.Builder builder() {
      return new FixedAmountCalculation.Builder();
    }

    @Override
    public Class<? extends FixedAmountCalculation> beanType() {
      return FixedAmountCalculation.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code calculationAmount} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurrencyAmount> calculationAmount() {
      return calculationAmount;
    }

    /**
     * The meta-property for the {@code fixedRate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> fixedRate() {
      return fixedRate;
    }

    /**
     * The meta-property for the {@code dayCountFraction} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DayCount> dayCountFraction() {
      return dayCountFraction;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1389305985:  // calculationAmount
          return ((FixedAmountCalculation) bean).getCalculationAmount();
        case 747425396:  // fixedRate
          return ((FixedAmountCalculation) bean).getFixedRate();
        case -2120064523:  // dayCountFraction
          return ((FixedAmountCalculation) bean).getDayCountFraction();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FixedAmountCalculation}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<FixedAmountCalculation> {

    private CurrencyAmount calculationAmount;
    private double fixedRate;
    private DayCount dayCountFraction;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(FixedAmountCalculation beanToCopy) {
      this.calculationAmount = beanToCopy.getCalculationAmount();
      this.fixedRate = beanToCopy.getFixedRate();
      this.dayCountFraction = beanToCopy.getDayCountFraction();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1389305985:  // calculationAmount
          return calculationAmount;
        case 747425396:  // fixedRate
          return fixedRate;
        case -2120064523:  // dayCountFraction
          return dayCountFraction;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1389305985:  // calculationAmount
          this.calculationAmount = (CurrencyAmount) newValue;
          break;
        case 747425396:  // fixedRate
          this.fixedRate = (Double) newValue;
          break;
        case -2120064523:  // dayCountFraction
          this.dayCountFraction = (DayCount) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public FixedAmountCalculation build() {
      return new FixedAmountCalculation(
          calculationAmount,
          fixedRate,
          dayCountFraction);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code calculationAmount} property in the builder.
     * @param calculationAmount  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder calculationAmount(CurrencyAmount calculationAmount) {
      JodaBeanUtils.notNull(calculationAmount, "calculationAmount");
      this.calculationAmount = calculationAmount;
      return this;
    }

    /**
     * Sets the {@code fixedRate} property in the builder.
     * @param fixedRate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder fixedRate(double fixedRate) {
      JodaBeanUtils.notNull(fixedRate, "fixedRate");
      this.fixedRate = fixedRate;
      return this;
    }

    /**
     * Sets the {@code dayCountFraction} property in the builder.
     * @param dayCountFraction  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder dayCountFraction(DayCount dayCountFraction) {
      JodaBeanUtils.notNull(dayCountFraction, "dayCountFraction");
      this.dayCountFraction = dayCountFraction;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("FixedAmountCalculation.Builder{");
      buf.append("calculationAmount").append('=').append(JodaBeanUtils.toString(calculationAmount)).append(',').append(' ');
      buf.append("fixedRate").append('=').append(JodaBeanUtils.toString(fixedRate)).append(',').append(' ');
      buf.append("dayCountFraction").append('=').append(JodaBeanUtils.toString(dayCountFraction));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
