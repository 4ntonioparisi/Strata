/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 * <p>
 * Please see distribution for license.
 */
package com.opengamma.strata.finance.credit.fee;

import com.opengamma.strata.basics.date.DayCount;
import com.opengamma.strata.basics.schedule.Frequency;
import com.opengamma.strata.basics.schedule.StubConvention;
import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

/**
 * This element contains all the terms relevant to defining the fixed amounts/payments per
 * the applicable ISDA definitions.
 */
@BeanDefinition
public final class FeeLeg
    implements ImmutableBean, Serializable {

  /**
   * The notional amount of protection coverage. ISDA 2003 Term: Floating Rate Payer Calculation Amount
   */
  @PropertyDefinition(validate = "notNull")
  final double calculationAmount;

  /**
   * Is the accrued premium paid in the event of a default
   */
  @PropertyDefinition(validate = "notNull")
  final boolean payAccOnDefault;

  /**
   * (aka Protection Effective sate or assignment date). Date when party assumes ownership.
   * This is usually T+1. This is when protection (and risk) starts in terms of the model.
   * Note, this is sometimes just called the Effective Date, however this can cause
   * confusion with the legal effective date which is T-60 or T-90.
   */
  @PropertyDefinition(validate = "notNull")
  final LocalDate stepInDate;

  /**
   * Day count used for accrual
   */
  @PropertyDefinition(validate = "notNull")
  final DayCount dayCount;

  /**
   * The nominal step between premium payments (e.g. 3 months, 6 months).
   */
  @PropertyDefinition(validate = "notNull")
  final Frequency frequency;

  /**
   * How stub periods will be calculated when partial periods are encountered.
   */
  @PropertyDefinition(validate = "notNull")
  final StubConvention stubConvention;

  public static FeeLeg of(
      double calculationAmount,
      boolean payAccOnDefault,
      LocalDate stepInDate,
      DayCount dayCount,
      Frequency frequency,
      StubConvention stubConvention
  ) {
    return FeeLeg
        .builder()
        .calculationAmount(calculationAmount)
        .payAccOnDefault(payAccOnDefault)
        .stepInDate(stepInDate)
        .dayCount(dayCount)
        .frequency(frequency)
        .stubConvention(stubConvention)
        .build();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FeeLeg}.
   * @return the meta-bean, not null
   */
  public static FeeLeg.Meta meta() {
    return FeeLeg.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FeeLeg.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static FeeLeg.Builder builder() {
    return new FeeLeg.Builder();
  }

  private FeeLeg(
      double calculationAmount,
      boolean payAccOnDefault,
      LocalDate stepInDate,
      DayCount dayCount,
      Frequency frequency,
      StubConvention stubConvention) {
    JodaBeanUtils.notNull(calculationAmount, "calculationAmount");
    JodaBeanUtils.notNull(payAccOnDefault, "payAccOnDefault");
    JodaBeanUtils.notNull(stepInDate, "stepInDate");
    JodaBeanUtils.notNull(dayCount, "dayCount");
    JodaBeanUtils.notNull(frequency, "frequency");
    JodaBeanUtils.notNull(stubConvention, "stubConvention");
    this.calculationAmount = calculationAmount;
    this.payAccOnDefault = payAccOnDefault;
    this.stepInDate = stepInDate;
    this.dayCount = dayCount;
    this.frequency = frequency;
    this.stubConvention = stubConvention;
  }

  @Override
  public FeeLeg.Meta metaBean() {
    return FeeLeg.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the notional amount of protection coverage. ISDA 2003 Term: Floating Rate Payer Calculation Amount
   * @return the value of the property, not null
   */
  public double getCalculationAmount() {
    return calculationAmount;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets is the accrued premium paid in the event of a default
   * @return the value of the property, not null
   */
  public boolean isPayAccOnDefault() {
    return payAccOnDefault;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets (aka Protection Effective sate or assignment date). Date when party assumes ownership.
   * This is usually T+1. This is when protection (and risk) starts in terms of the model.
   * Note, this is sometimes just called the Effective Date, however this can cause
   * confusion with the legal effective date which is T-60 or T-90.
   * @return the value of the property, not null
   */
  public LocalDate getStepInDate() {
    return stepInDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets day count used for accrual
   * @return the value of the property, not null
   */
  public DayCount getDayCount() {
    return dayCount;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the nominal step between premium payments (e.g. 3 months, 6 months).
   * @return the value of the property, not null
   */
  public Frequency getFrequency() {
    return frequency;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets how stub periods will be calculated when partial periods are encountered.
   * @return the value of the property, not null
   */
  public StubConvention getStubConvention() {
    return stubConvention;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FeeLeg other = (FeeLeg) obj;
      return JodaBeanUtils.equal(getCalculationAmount(), other.getCalculationAmount()) &&
          (isPayAccOnDefault() == other.isPayAccOnDefault()) &&
          JodaBeanUtils.equal(getStepInDate(), other.getStepInDate()) &&
          JodaBeanUtils.equal(getDayCount(), other.getDayCount()) &&
          JodaBeanUtils.equal(getFrequency(), other.getFrequency()) &&
          JodaBeanUtils.equal(getStubConvention(), other.getStubConvention());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getCalculationAmount());
    hash = hash * 31 + JodaBeanUtils.hashCode(isPayAccOnDefault());
    hash = hash * 31 + JodaBeanUtils.hashCode(getStepInDate());
    hash = hash * 31 + JodaBeanUtils.hashCode(getDayCount());
    hash = hash * 31 + JodaBeanUtils.hashCode(getFrequency());
    hash = hash * 31 + JodaBeanUtils.hashCode(getStubConvention());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(224);
    buf.append("FeeLeg{");
    buf.append("calculationAmount").append('=').append(getCalculationAmount()).append(',').append(' ');
    buf.append("payAccOnDefault").append('=').append(isPayAccOnDefault()).append(',').append(' ');
    buf.append("stepInDate").append('=').append(getStepInDate()).append(',').append(' ');
    buf.append("dayCount").append('=').append(getDayCount()).append(',').append(' ');
    buf.append("frequency").append('=').append(getFrequency()).append(',').append(' ');
    buf.append("stubConvention").append('=').append(JodaBeanUtils.toString(getStubConvention()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FeeLeg}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code calculationAmount} property.
     */
    private final MetaProperty<Double> calculationAmount = DirectMetaProperty.ofImmutable(
        this, "calculationAmount", FeeLeg.class, Double.TYPE);
    /**
     * The meta-property for the {@code payAccOnDefault} property.
     */
    private final MetaProperty<Boolean> payAccOnDefault = DirectMetaProperty.ofImmutable(
        this, "payAccOnDefault", FeeLeg.class, Boolean.TYPE);
    /**
     * The meta-property for the {@code stepInDate} property.
     */
    private final MetaProperty<LocalDate> stepInDate = DirectMetaProperty.ofImmutable(
        this, "stepInDate", FeeLeg.class, LocalDate.class);
    /**
     * The meta-property for the {@code dayCount} property.
     */
    private final MetaProperty<DayCount> dayCount = DirectMetaProperty.ofImmutable(
        this, "dayCount", FeeLeg.class, DayCount.class);
    /**
     * The meta-property for the {@code frequency} property.
     */
    private final MetaProperty<Frequency> frequency = DirectMetaProperty.ofImmutable(
        this, "frequency", FeeLeg.class, Frequency.class);
    /**
     * The meta-property for the {@code stubConvention} property.
     */
    private final MetaProperty<StubConvention> stubConvention = DirectMetaProperty.ofImmutable(
        this, "stubConvention", FeeLeg.class, StubConvention.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "calculationAmount",
        "payAccOnDefault",
        "stepInDate",
        "dayCount",
        "frequency",
        "stubConvention");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1389305985:  // calculationAmount
          return calculationAmount;
        case -988493655:  // payAccOnDefault
          return payAccOnDefault;
        case -1890516897:  // stepInDate
          return stepInDate;
        case 1905311443:  // dayCount
          return dayCount;
        case -70023844:  // frequency
          return frequency;
        case -31408449:  // stubConvention
          return stubConvention;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public FeeLeg.Builder builder() {
      return new FeeLeg.Builder();
    }

    @Override
    public Class<? extends FeeLeg> beanType() {
      return FeeLeg.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code calculationAmount} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> calculationAmount() {
      return calculationAmount;
    }

    /**
     * The meta-property for the {@code payAccOnDefault} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Boolean> payAccOnDefault() {
      return payAccOnDefault;
    }

    /**
     * The meta-property for the {@code stepInDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> stepInDate() {
      return stepInDate;
    }

    /**
     * The meta-property for the {@code dayCount} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DayCount> dayCount() {
      return dayCount;
    }

    /**
     * The meta-property for the {@code frequency} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Frequency> frequency() {
      return frequency;
    }

    /**
     * The meta-property for the {@code stubConvention} property.
     * @return the meta-property, not null
     */
    public MetaProperty<StubConvention> stubConvention() {
      return stubConvention;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1389305985:  // calculationAmount
          return ((FeeLeg) bean).getCalculationAmount();
        case -988493655:  // payAccOnDefault
          return ((FeeLeg) bean).isPayAccOnDefault();
        case -1890516897:  // stepInDate
          return ((FeeLeg) bean).getStepInDate();
        case 1905311443:  // dayCount
          return ((FeeLeg) bean).getDayCount();
        case -70023844:  // frequency
          return ((FeeLeg) bean).getFrequency();
        case -31408449:  // stubConvention
          return ((FeeLeg) bean).getStubConvention();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FeeLeg}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<FeeLeg> {

    private double calculationAmount;
    private boolean payAccOnDefault;
    private LocalDate stepInDate;
    private DayCount dayCount;
    private Frequency frequency;
    private StubConvention stubConvention;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(FeeLeg beanToCopy) {
      this.calculationAmount = beanToCopy.getCalculationAmount();
      this.payAccOnDefault = beanToCopy.isPayAccOnDefault();
      this.stepInDate = beanToCopy.getStepInDate();
      this.dayCount = beanToCopy.getDayCount();
      this.frequency = beanToCopy.getFrequency();
      this.stubConvention = beanToCopy.getStubConvention();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1389305985:  // calculationAmount
          return calculationAmount;
        case -988493655:  // payAccOnDefault
          return payAccOnDefault;
        case -1890516897:  // stepInDate
          return stepInDate;
        case 1905311443:  // dayCount
          return dayCount;
        case -70023844:  // frequency
          return frequency;
        case -31408449:  // stubConvention
          return stubConvention;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1389305985:  // calculationAmount
          this.calculationAmount = (Double) newValue;
          break;
        case -988493655:  // payAccOnDefault
          this.payAccOnDefault = (Boolean) newValue;
          break;
        case -1890516897:  // stepInDate
          this.stepInDate = (LocalDate) newValue;
          break;
        case 1905311443:  // dayCount
          this.dayCount = (DayCount) newValue;
          break;
        case -70023844:  // frequency
          this.frequency = (Frequency) newValue;
          break;
        case -31408449:  // stubConvention
          this.stubConvention = (StubConvention) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public FeeLeg build() {
      return new FeeLeg(
          calculationAmount,
          payAccOnDefault,
          stepInDate,
          dayCount,
          frequency,
          stubConvention);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code calculationAmount} property in the builder.
     * @param calculationAmount  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder calculationAmount(double calculationAmount) {
      JodaBeanUtils.notNull(calculationAmount, "calculationAmount");
      this.calculationAmount = calculationAmount;
      return this;
    }

    /**
     * Sets the {@code payAccOnDefault} property in the builder.
     * @param payAccOnDefault  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder payAccOnDefault(boolean payAccOnDefault) {
      JodaBeanUtils.notNull(payAccOnDefault, "payAccOnDefault");
      this.payAccOnDefault = payAccOnDefault;
      return this;
    }

    /**
     * Sets the {@code stepInDate} property in the builder.
     * @param stepInDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder stepInDate(LocalDate stepInDate) {
      JodaBeanUtils.notNull(stepInDate, "stepInDate");
      this.stepInDate = stepInDate;
      return this;
    }

    /**
     * Sets the {@code dayCount} property in the builder.
     * @param dayCount  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder dayCount(DayCount dayCount) {
      JodaBeanUtils.notNull(dayCount, "dayCount");
      this.dayCount = dayCount;
      return this;
    }

    /**
     * Sets the {@code frequency} property in the builder.
     * @param frequency  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder frequency(Frequency frequency) {
      JodaBeanUtils.notNull(frequency, "frequency");
      this.frequency = frequency;
      return this;
    }

    /**
     * Sets the {@code stubConvention} property in the builder.
     * @param stubConvention  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder stubConvention(StubConvention stubConvention) {
      JodaBeanUtils.notNull(stubConvention, "stubConvention");
      this.stubConvention = stubConvention;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(224);
      buf.append("FeeLeg.Builder{");
      buf.append("calculationAmount").append('=').append(JodaBeanUtils.toString(calculationAmount)).append(',').append(' ');
      buf.append("payAccOnDefault").append('=').append(JodaBeanUtils.toString(payAccOnDefault)).append(',').append(' ');
      buf.append("stepInDate").append('=').append(JodaBeanUtils.toString(stepInDate)).append(',').append(' ');
      buf.append("dayCount").append('=').append(JodaBeanUtils.toString(dayCount)).append(',').append(' ');
      buf.append("frequency").append('=').append(JodaBeanUtils.toString(frequency)).append(',').append(' ');
      buf.append("stubConvention").append('=').append(JodaBeanUtils.toString(stubConvention));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
