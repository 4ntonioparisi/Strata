package com.opengamma.strata.finance.credit.general.reference;

import com.opengamma.strata.collect.id.StandardId;
import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

/**
 * Contains all the terms relevant to defining the reference entity and reference obligation(s)
 */
@BeanDefinition
public final class SingleNameReferenceInformation
    implements ReferenceInformation, ImmutableBean, Serializable {

  /**
   * The corporate or sovereign entity on which you are buying or selling protection and any
   * successor that assumes all or substantially all of its contractual and other obligations.
   * It is vital to use the correct legal name of the entity and to be careful not to choose a
   * subsidiary if you really want to trade protection on a parent company.
   * Please note, Reference Entities cannot be senior or subordinated.
   * It is the obligations of the Reference Entities that can be senior or subordinated.
   * ISDA 2003 Term: Reference Entity
   */
  @PropertyDefinition(validate = "notNull")
  final String referenceEntityName;

  /**
   * A legal entity identifier (e.g. RED entity code)
   */
  @PropertyDefinition(validate = "notNull")
  final StandardId referenceEntityId;

  /**
   * The Reference Obligation is a financial instrument that is either issued or guaranteed
   * by the reference entity. It serves to clarify the precise reference entity protection
   * is being offered upon, and its legal position with regard to other related firms
   * (parents/subsidiaries). Furthermore the Reference Obligation is ALWAYS deliverable
   * and establishes the Pari Passu ranking (as the deliverable bonds must rank equal
   * to the reference obligation).
   * ISDA 2003 Term: Reference Obligation
   *
   * security identifier (e.g. RED code, CUSIP, ISIN, etc)
   */
  @PropertyDefinition(validate = "notNull")
  final StandardId referenceObligationId;

  @Override
  public ReferenceInformationType getType() {
    return ReferenceInformationType.SINGLE_NAME;
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SingleNameReferenceInformation}.
   * @return the meta-bean, not null
   */
  public static SingleNameReferenceInformation.Meta meta() {
    return SingleNameReferenceInformation.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(SingleNameReferenceInformation.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static SingleNameReferenceInformation.Builder builder() {
    return new SingleNameReferenceInformation.Builder();
  }

  private SingleNameReferenceInformation(
      String referenceEntityName,
      StandardId referenceEntityId,
      StandardId referenceObligationId) {
    JodaBeanUtils.notNull(referenceEntityName, "referenceEntityName");
    JodaBeanUtils.notNull(referenceEntityId, "referenceEntityId");
    JodaBeanUtils.notNull(referenceObligationId, "referenceObligationId");
    this.referenceEntityName = referenceEntityName;
    this.referenceEntityId = referenceEntityId;
    this.referenceObligationId = referenceObligationId;
  }

  @Override
  public SingleNameReferenceInformation.Meta metaBean() {
    return SingleNameReferenceInformation.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the corporate or sovereign entity on which you are buying or selling protection and any
   * successor that assumes all or substantially all of its contractual and other obligations.
   * It is vital to use the correct legal name of the entity and to be careful not to choose a
   * subsidiary if you really want to trade protection on a parent company.
   * Please note, Reference Entities cannot be senior or subordinated.
   * It is the obligations of the Reference Entities that can be senior or subordinated.
   * ISDA 2003 Term: Reference Entity
   * @return the value of the property, not null
   */
  public String getReferenceEntityName() {
    return referenceEntityName;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets a legal entity identifier (e.g. RED entity code)
   * @return the value of the property, not null
   */
  public StandardId getReferenceEntityId() {
    return referenceEntityId;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the Reference Obligation is a financial instrument that is either issued or guaranteed
   * by the reference entity. It serves to clarify the precise reference entity protection
   * is being offered upon, and its legal position with regard to other related firms
   * (parents/subsidiaries). Furthermore the Reference Obligation is ALWAYS deliverable
   * and establishes the Pari Passu ranking (as the deliverable bonds must rank equal
   * to the reference obligation).
   * ISDA 2003 Term: Reference Obligation
   * 
   * security identifier (e.g. RED code, CUSIP, ISIN, etc)
   * @return the value of the property, not null
   */
  public StandardId getReferenceObligationId() {
    return referenceObligationId;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      SingleNameReferenceInformation other = (SingleNameReferenceInformation) obj;
      return JodaBeanUtils.equal(getReferenceEntityName(), other.getReferenceEntityName()) &&
          JodaBeanUtils.equal(getReferenceEntityId(), other.getReferenceEntityId()) &&
          JodaBeanUtils.equal(getReferenceObligationId(), other.getReferenceObligationId());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getReferenceEntityName());
    hash = hash * 31 + JodaBeanUtils.hashCode(getReferenceEntityId());
    hash = hash * 31 + JodaBeanUtils.hashCode(getReferenceObligationId());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("SingleNameReferenceInformation{");
    buf.append("referenceEntityName").append('=').append(getReferenceEntityName()).append(',').append(' ');
    buf.append("referenceEntityId").append('=').append(getReferenceEntityId()).append(',').append(' ');
    buf.append("referenceObligationId").append('=').append(JodaBeanUtils.toString(getReferenceObligationId()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SingleNameReferenceInformation}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code referenceEntityName} property.
     */
    private final MetaProperty<String> referenceEntityName = DirectMetaProperty.ofImmutable(
        this, "referenceEntityName", SingleNameReferenceInformation.class, String.class);
    /**
     * The meta-property for the {@code referenceEntityId} property.
     */
    private final MetaProperty<StandardId> referenceEntityId = DirectMetaProperty.ofImmutable(
        this, "referenceEntityId", SingleNameReferenceInformation.class, StandardId.class);
    /**
     * The meta-property for the {@code referenceObligationId} property.
     */
    private final MetaProperty<StandardId> referenceObligationId = DirectMetaProperty.ofImmutable(
        this, "referenceObligationId", SingleNameReferenceInformation.class, StandardId.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "referenceEntityName",
        "referenceEntityId",
        "referenceObligationId");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1199381831:  // referenceEntityName
          return referenceEntityName;
        case -1949849399:  // referenceEntityId
          return referenceEntityId;
        case 1485227556:  // referenceObligationId
          return referenceObligationId;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public SingleNameReferenceInformation.Builder builder() {
      return new SingleNameReferenceInformation.Builder();
    }

    @Override
    public Class<? extends SingleNameReferenceInformation> beanType() {
      return SingleNameReferenceInformation.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code referenceEntityName} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> referenceEntityName() {
      return referenceEntityName;
    }

    /**
     * The meta-property for the {@code referenceEntityId} property.
     * @return the meta-property, not null
     */
    public MetaProperty<StandardId> referenceEntityId() {
      return referenceEntityId;
    }

    /**
     * The meta-property for the {@code referenceObligationId} property.
     * @return the meta-property, not null
     */
    public MetaProperty<StandardId> referenceObligationId() {
      return referenceObligationId;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1199381831:  // referenceEntityName
          return ((SingleNameReferenceInformation) bean).getReferenceEntityName();
        case -1949849399:  // referenceEntityId
          return ((SingleNameReferenceInformation) bean).getReferenceEntityId();
        case 1485227556:  // referenceObligationId
          return ((SingleNameReferenceInformation) bean).getReferenceObligationId();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code SingleNameReferenceInformation}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<SingleNameReferenceInformation> {

    private String referenceEntityName;
    private StandardId referenceEntityId;
    private StandardId referenceObligationId;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(SingleNameReferenceInformation beanToCopy) {
      this.referenceEntityName = beanToCopy.getReferenceEntityName();
      this.referenceEntityId = beanToCopy.getReferenceEntityId();
      this.referenceObligationId = beanToCopy.getReferenceObligationId();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1199381831:  // referenceEntityName
          return referenceEntityName;
        case -1949849399:  // referenceEntityId
          return referenceEntityId;
        case 1485227556:  // referenceObligationId
          return referenceObligationId;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1199381831:  // referenceEntityName
          this.referenceEntityName = (String) newValue;
          break;
        case -1949849399:  // referenceEntityId
          this.referenceEntityId = (StandardId) newValue;
          break;
        case 1485227556:  // referenceObligationId
          this.referenceObligationId = (StandardId) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public SingleNameReferenceInformation build() {
      return new SingleNameReferenceInformation(
          referenceEntityName,
          referenceEntityId,
          referenceObligationId);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code referenceEntityName} property in the builder.
     * @param referenceEntityName  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder referenceEntityName(String referenceEntityName) {
      JodaBeanUtils.notNull(referenceEntityName, "referenceEntityName");
      this.referenceEntityName = referenceEntityName;
      return this;
    }

    /**
     * Sets the {@code referenceEntityId} property in the builder.
     * @param referenceEntityId  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder referenceEntityId(StandardId referenceEntityId) {
      JodaBeanUtils.notNull(referenceEntityId, "referenceEntityId");
      this.referenceEntityId = referenceEntityId;
      return this;
    }

    /**
     * Sets the {@code referenceObligationId} property in the builder.
     * @param referenceObligationId  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder referenceObligationId(StandardId referenceObligationId) {
      JodaBeanUtils.notNull(referenceObligationId, "referenceObligationId");
      this.referenceObligationId = referenceObligationId;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("SingleNameReferenceInformation.Builder{");
      buf.append("referenceEntityName").append('=').append(JodaBeanUtils.toString(referenceEntityName)).append(',').append(' ');
      buf.append("referenceEntityId").append('=').append(JodaBeanUtils.toString(referenceEntityId)).append(',').append(' ');
      buf.append("referenceObligationId").append('=').append(JodaBeanUtils.toString(referenceObligationId));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
