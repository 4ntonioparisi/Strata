/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 * <p>
 * Please see distribution for license.
 */
package com.opengamma.strata.finance.credit.type;

import com.opengamma.strata.basics.BuySell;
import com.opengamma.strata.collect.id.StandardId;
import com.opengamma.strata.finance.Template;
import com.opengamma.strata.finance.credit.CdsTrade;
import com.opengamma.strata.finance.credit.markit.RedCode;
import com.opengamma.strata.finance.credit.fee.SinglePayment;
import com.opengamma.strata.finance.credit.SeniorityLevel;
import com.opengamma.strata.finance.credit.RestructuringClause;
import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableValidator;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.time.LocalDate;
import java.time.Period;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

@BeanDefinition
public final class StandardCdsTemplate
    implements Template, ImmutableBean, Serializable {

  /**
   * The market convention of the swap.
   */
  @PropertyDefinition(validate = "notNull")
  private final StandardCdsConvention convention;

  //-------------------------------------------------------------------------
  @ImmutableValidator
  private void validate() {
    //   ArgChecker.isFalse(coupon >= 1 || coupon <= 0, "Coupon must be between 0 and 1");
  }

  //-------------------------------------------------------------------------

  public CdsTrade toSingleNameTrade(
      StandardId id,
      LocalDate tradeDate,
      Period period,
      BuySell buySell,
      double notional,
      double coupon,
      RedCode referenceEntityId,
      String referenceEntityName,
      SeniorityLevel seniorityLevel,
      RestructuringClause restructuringClause
  ) {
    return convention.toSingleNameTrade(
        id,
        tradeDate,
        period,
        buySell,
        notional,
        coupon,
        referenceEntityId,
        referenceEntityName,
        seniorityLevel,
        restructuringClause,
        Optional.empty()
    );
  }

  public CdsTrade toSingleNameTrade(
      StandardId id,
      LocalDate tradeDate,
      Period period,
      BuySell buySell,
      double notional,
      double coupon,
      RedCode referenceEntityId,
      String referenceEntityName,
      SeniorityLevel seniorityLevel,
      RestructuringClause restructuringClause,
      double upfrontFeeAmount,
      LocalDate upfrontFeePaymentDate

  ) {
    return convention.toSingleNameTrade(
        id,
        tradeDate,
        period,
        buySell,
        notional,
        coupon,
        referenceEntityId,
        referenceEntityName,
        seniorityLevel,
        restructuringClause,
        Optional.of(
            SinglePayment.of(
                upfrontFeeAmount,
                upfrontFeePaymentDate
            )
        )
    );
  }

  public CdsTrade toIndexTrade(
      StandardId id,
      LocalDate tradeDate,
      Period period,
      BuySell buySell,
      double notional,
      double coupon,
      RedCode indexId,
      String indexName,
      int indexSeries,
      int indexAnnexVersion,
      RestructuringClause restructuringClause) {
    return convention.toIndexTrade(
        id,
        tradeDate,
        period,
        buySell,
        notional,
        coupon,
        indexId,
        indexName,
        indexSeries,
        indexAnnexVersion,
        restructuringClause,
        Optional.empty()
    );
  }


  public CdsTrade toIndexTrade(
      StandardId id,
      LocalDate tradeDate,
      Period period,
      BuySell buySell,
      double notional,
      double coupon,
      RedCode indexId,
      String indexName,
      int indexSeries,
      int indexAnnexVersion,
      RestructuringClause restructuringClause,
      double upfrontFeeAmount,
      LocalDate upfrontFeePaymentDate
  ) {
    return convention.toIndexTrade(
        id,
        tradeDate,
        period,
        buySell,
        notional,
        coupon,
        indexId,
        indexName,
        indexSeries,
        indexAnnexVersion,
        restructuringClause,
        Optional.of(
            SinglePayment.of(
                upfrontFeeAmount,
                upfrontFeePaymentDate
            )
        )
    );
  }

  public static StandardCdsTemplate of(
      StandardCdsConvention convention
  ) {
    return new StandardCdsTemplate(convention);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code StandardCdsTemplate}.
   * @return the meta-bean, not null
   */
  public static StandardCdsTemplate.Meta meta() {
    return StandardCdsTemplate.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(StandardCdsTemplate.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static StandardCdsTemplate.Builder builder() {
    return new StandardCdsTemplate.Builder();
  }

  private StandardCdsTemplate(
      StandardCdsConvention convention) {
    JodaBeanUtils.notNull(convention, "convention");
    this.convention = convention;
    validate();
  }

  @Override
  public StandardCdsTemplate.Meta metaBean() {
    return StandardCdsTemplate.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the market convention of the swap.
   * @return the value of the property, not null
   */
  public StandardCdsConvention getConvention() {
    return convention;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      StandardCdsTemplate other = (StandardCdsTemplate) obj;
      return JodaBeanUtils.equal(getConvention(), other.getConvention());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getConvention());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("StandardCdsTemplate{");
    buf.append("convention").append('=').append(JodaBeanUtils.toString(getConvention()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code StandardCdsTemplate}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code convention} property.
     */
    private final MetaProperty<StandardCdsConvention> convention = DirectMetaProperty.ofImmutable(
        this, "convention", StandardCdsTemplate.class, StandardCdsConvention.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "convention");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 2039569265:  // convention
          return convention;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public StandardCdsTemplate.Builder builder() {
      return new StandardCdsTemplate.Builder();
    }

    @Override
    public Class<? extends StandardCdsTemplate> beanType() {
      return StandardCdsTemplate.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code convention} property.
     * @return the meta-property, not null
     */
    public MetaProperty<StandardCdsConvention> convention() {
      return convention;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 2039569265:  // convention
          return ((StandardCdsTemplate) bean).getConvention();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code StandardCdsTemplate}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<StandardCdsTemplate> {

    private StandardCdsConvention convention;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(StandardCdsTemplate beanToCopy) {
      this.convention = beanToCopy.getConvention();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 2039569265:  // convention
          return convention;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 2039569265:  // convention
          this.convention = (StandardCdsConvention) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public StandardCdsTemplate build() {
      return new StandardCdsTemplate(
          convention);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code convention} property in the builder.
     * @param convention  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder convention(StandardCdsConvention convention) {
      JodaBeanUtils.notNull(convention, "convention");
      this.convention = convention;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("StandardCdsTemplate.Builder{");
      buf.append("convention").append('=').append(JodaBeanUtils.toString(convention));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
