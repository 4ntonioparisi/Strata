/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.platform.finance.swap;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Defines whether the notional amount is exchanged between the counterparties.
 * <p>
 * In most swaps, the notional amount is not exchanged, with only the net difference being exchanged.
 * However, in certain cases, initial, final or intermediate amounts are exchanged.
 * In this case, the notional can be referred to as the principal.
 */
@BeanDefinition
public final class NotionalExchange
    implements ImmutableBean, Serializable {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * A constant used to indicate that no exchange takes place.
   */
  public static final NotionalExchange NO_EXCHANGE = builder().build();

  /**
   * The flag indicating whether to exchange the initial notional.
   */
  @PropertyDefinition(validate = "notNull")
  private final boolean initialExchange;
  /**
   * The flag indicating whether to exchange the final notional.
   */
  @PropertyDefinition(validate = "notNull")
  private final boolean finalExchange;
  /**
   * The flag indicating whether to exchange the differences in the notional during the lifetime of the swap.
   */
  @PropertyDefinition(validate = "notNull")
  private final boolean intermediateExchange;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code NotionalExchange}.
   * @return the meta-bean, not null
   */
  public static NotionalExchange.Meta meta() {
    return NotionalExchange.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(NotionalExchange.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static NotionalExchange.Builder builder() {
    return new NotionalExchange.Builder();
  }

  private NotionalExchange(
      boolean initialExchange,
      boolean finalExchange,
      boolean intermediateExchange) {
    JodaBeanUtils.notNull(initialExchange, "initialExchange");
    JodaBeanUtils.notNull(finalExchange, "finalExchange");
    JodaBeanUtils.notNull(intermediateExchange, "intermediateExchange");
    this.initialExchange = initialExchange;
    this.finalExchange = finalExchange;
    this.intermediateExchange = intermediateExchange;
  }

  @Override
  public NotionalExchange.Meta metaBean() {
    return NotionalExchange.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the flag indicating whether to exchange the initial notional.
   * @return the value of the property, not null
   */
  public boolean isInitialExchange() {
    return initialExchange;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the flag indicating whether to exchange the final notional.
   * @return the value of the property, not null
   */
  public boolean isFinalExchange() {
    return finalExchange;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the flag indicating whether to exchange the differences in the notional during the lifetime of the swap.
   * @return the value of the property, not null
   */
  public boolean isIntermediateExchange() {
    return intermediateExchange;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      NotionalExchange other = (NotionalExchange) obj;
      return (isInitialExchange() == other.isInitialExchange()) &&
          (isFinalExchange() == other.isFinalExchange()) &&
          (isIntermediateExchange() == other.isIntermediateExchange());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(isInitialExchange());
    hash += hash * 31 + JodaBeanUtils.hashCode(isFinalExchange());
    hash += hash * 31 + JodaBeanUtils.hashCode(isIntermediateExchange());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("NotionalExchange{");
    buf.append("initialExchange").append('=').append(isInitialExchange()).append(',').append(' ');
    buf.append("finalExchange").append('=').append(isFinalExchange()).append(',').append(' ');
    buf.append("intermediateExchange").append('=').append(JodaBeanUtils.toString(isIntermediateExchange()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code NotionalExchange}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code initialExchange} property.
     */
    private final MetaProperty<Boolean> initialExchange = DirectMetaProperty.ofImmutable(
        this, "initialExchange", NotionalExchange.class, Boolean.TYPE);
    /**
     * The meta-property for the {@code finalExchange} property.
     */
    private final MetaProperty<Boolean> finalExchange = DirectMetaProperty.ofImmutable(
        this, "finalExchange", NotionalExchange.class, Boolean.TYPE);
    /**
     * The meta-property for the {@code intermediateExchange} property.
     */
    private final MetaProperty<Boolean> intermediateExchange = DirectMetaProperty.ofImmutable(
        this, "intermediateExchange", NotionalExchange.class, Boolean.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "initialExchange",
        "finalExchange",
        "intermediateExchange");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -511982201:  // initialExchange
          return initialExchange;
        case -1048781383:  // finalExchange
          return finalExchange;
        case -2147112388:  // intermediateExchange
          return intermediateExchange;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public NotionalExchange.Builder builder() {
      return new NotionalExchange.Builder();
    }

    @Override
    public Class<? extends NotionalExchange> beanType() {
      return NotionalExchange.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code initialExchange} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Boolean> initialExchange() {
      return initialExchange;
    }

    /**
     * The meta-property for the {@code finalExchange} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Boolean> finalExchange() {
      return finalExchange;
    }

    /**
     * The meta-property for the {@code intermediateExchange} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Boolean> intermediateExchange() {
      return intermediateExchange;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -511982201:  // initialExchange
          return ((NotionalExchange) bean).isInitialExchange();
        case -1048781383:  // finalExchange
          return ((NotionalExchange) bean).isFinalExchange();
        case -2147112388:  // intermediateExchange
          return ((NotionalExchange) bean).isIntermediateExchange();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code NotionalExchange}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<NotionalExchange> {

    private boolean initialExchange;
    private boolean finalExchange;
    private boolean intermediateExchange;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(NotionalExchange beanToCopy) {
      this.initialExchange = beanToCopy.isInitialExchange();
      this.finalExchange = beanToCopy.isFinalExchange();
      this.intermediateExchange = beanToCopy.isIntermediateExchange();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -511982201:  // initialExchange
          return initialExchange;
        case -1048781383:  // finalExchange
          return finalExchange;
        case -2147112388:  // intermediateExchange
          return intermediateExchange;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -511982201:  // initialExchange
          this.initialExchange = (Boolean) newValue;
          break;
        case -1048781383:  // finalExchange
          this.finalExchange = (Boolean) newValue;
          break;
        case -2147112388:  // intermediateExchange
          this.intermediateExchange = (Boolean) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public NotionalExchange build() {
      return new NotionalExchange(
          initialExchange,
          finalExchange,
          intermediateExchange);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code initialExchange} property in the builder.
     * @param initialExchange  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder initialExchange(boolean initialExchange) {
      JodaBeanUtils.notNull(initialExchange, "initialExchange");
      this.initialExchange = initialExchange;
      return this;
    }

    /**
     * Sets the {@code finalExchange} property in the builder.
     * @param finalExchange  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder finalExchange(boolean finalExchange) {
      JodaBeanUtils.notNull(finalExchange, "finalExchange");
      this.finalExchange = finalExchange;
      return this;
    }

    /**
     * Sets the {@code intermediateExchange} property in the builder.
     * @param intermediateExchange  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder intermediateExchange(boolean intermediateExchange) {
      JodaBeanUtils.notNull(intermediateExchange, "intermediateExchange");
      this.intermediateExchange = intermediateExchange;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("NotionalExchange.Builder{");
      buf.append("initialExchange").append('=').append(JodaBeanUtils.toString(initialExchange)).append(',').append(' ');
      buf.append("finalExchange").append('=').append(JodaBeanUtils.toString(finalExchange)).append(',').append(' ');
      buf.append("intermediateExchange").append('=').append(JodaBeanUtils.toString(intermediateExchange));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
