/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.platform.finance.future;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableDefaults;
import org.joda.beans.ImmutablePreBuild;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.basics.currency.Currency;
import com.opengamma.collect.ArgChecker;
import com.opengamma.platform.finance.observation.IborRateObservation;

/**
 * An expanded futures contract, based on an IBOR-like index, with dates calculated ready for pricing.
 * <p>
 * An Ibor future is a financial instrument that is based on the future value of
 * an IBOR-like interest rate.
 * An Ibor future is also known as a <i>STIR future</i> (Short Term Interest Rate).
 * <p>
 * This class represents the structure of a single futures contract, which is typically exchange traded.
 * <p>
 * An {@code ExpandedIborFuture} contains information based on holiday calendars.
 * If a holiday calendar changes, the adjusted dates may no longer be correct.
 * Care must be taken when placing the expanded form in a cache or persistence layer.
 */
@BeanDefinition
public final class ExpandedIborFuture
    implements IborFutureProduct, ImmutableBean, Serializable {

  /**
   * The currency that the future is quoted in.
   */
  @PropertyDefinition(validate = "notNull")
  private final Currency currency;
  /**
   * The notional amount.
   * <p>
   * This is the full notional of the deposit, such as 1 million dollars.
   * The notional expressed here must be positive.
   * The currency of the notional is specified by {@code currency}.
   */
  @PropertyDefinition(validate = "ArgChecker.notNegative")
  private final double notional;
  /**
   * The accrual factor, defaulted from the index if not set.
   * <p>
   * This is the year fraction of the contract, typically 0.25 for a 3 month deposit.
   * <p>
   * When building, this will default to the number of months in the index divided by 12
   * if not specified. However, if the index is not month-based, no defaulting will occur.
   */
  @PropertyDefinition(validate = "ArgChecker.notNegativeOrZero")
  private final double accrualFactor;
  /**
   * The underlying rate defined by an IBOR-like index.
   * <p>
   * The future is based on this rate, which contains the index and fixing date.
   * The fixing date is the same as the last trading date.
   * It will be a well known market index such as 'USD-LIBOR-3M'.
   */
  @PropertyDefinition(validate = "notNull")
  private final IborRateObservation rate;
  /**
   * The number of decimal places to round the futures price to, defaulted to '4'.
   * This assumes the future is quoted as {@code (100 - percentageRate)}.
   */
  @PropertyDefinition(validate = "ArgChecker.notNegative")
  private final int roundingDecimalPlaces;

  //-------------------------------------------------------------------------
  @ImmutableDefaults
  private static void applyDefaults(Builder builder) {
    builder.roundingDecimalPlaces(4);
  }

  @ImmutablePreBuild
  private static void preBuild(Builder builder) {
    if (builder.rate != null) {
      if (builder.accrualFactor == 0d && builder.rate.getIndex().getTenor().isMonthBased()) {
      builder.accrualFactor(builder.rate.getIndex().getTenor().getPeriod().toTotalMonths() / 12d);
    }
      if (builder.currency == null) {
        builder.currency = builder.rate.getIndex().getCurrency();
      }
    }
  }

  //-------------------------------------------------------------------------
  @Override
  public ExpandedIborFuture expand() {
    return this;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ExpandedIborFuture}.
   * @return the meta-bean, not null
   */
  public static ExpandedIborFuture.Meta meta() {
    return ExpandedIborFuture.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ExpandedIborFuture.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ExpandedIborFuture.Builder builder() {
    return new ExpandedIborFuture.Builder();
  }

  private ExpandedIborFuture(
      Currency currency,
      double notional,
      double accrualFactor,
      IborRateObservation rate,
      int roundingDecimalPlaces) {
    JodaBeanUtils.notNull(currency, "currency");
    ArgChecker.notNegative(notional, "notional");
    ArgChecker.notNegativeOrZero(accrualFactor, "accrualFactor");
    JodaBeanUtils.notNull(rate, "rate");
    ArgChecker.notNegative(roundingDecimalPlaces, "roundingDecimalPlaces");
    this.currency = currency;
    this.notional = notional;
    this.accrualFactor = accrualFactor;
    this.rate = rate;
    this.roundingDecimalPlaces = roundingDecimalPlaces;
  }

  @Override
  public ExpandedIborFuture.Meta metaBean() {
    return ExpandedIborFuture.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency that the future is quoted in.
   * @return the value of the property, not null
   */
  public Currency getCurrency() {
    return currency;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the notional amount.
   * <p>
   * This is the full notional of the deposit, such as 1 million dollars.
   * The notional expressed here must be positive.
   * The currency of the notional is specified by {@code currency}.
   * @return the value of the property
   */
  public double getNotional() {
    return notional;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the accrual factor, defaulted from the index if not set.
   * <p>
   * This is the year fraction of the contract, typically 0.25 for a 3 month deposit.
   * <p>
   * When building, this will default to the number of months in the index divided by 12
   * if not specified. However, if the index is not month-based, no defaulting will occur.
   * @return the value of the property
   */
  public double getAccrualFactor() {
    return accrualFactor;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlying rate defined by an IBOR-like index.
   * <p>
   * The future is based on this rate, which contains the index and fixing date.
   * The fixing date is the same as the last trading date.
   * It will be a well known market index such as 'USD-LIBOR-3M'.
   * @return the value of the property, not null
   */
  public IborRateObservation getRate() {
    return rate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the number of decimal places to round the futures price to, defaulted to '4'.
   * This assumes the future is quoted as {@code (100 - percentageRate)}.
   * @return the value of the property
   */
  public int getRoundingDecimalPlaces() {
    return roundingDecimalPlaces;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ExpandedIborFuture other = (ExpandedIborFuture) obj;
      return JodaBeanUtils.equal(getCurrency(), other.getCurrency()) &&
          JodaBeanUtils.equal(getNotional(), other.getNotional()) &&
          JodaBeanUtils.equal(getAccrualFactor(), other.getAccrualFactor()) &&
          JodaBeanUtils.equal(getRate(), other.getRate()) &&
          (getRoundingDecimalPlaces() == other.getRoundingDecimalPlaces());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getCurrency());
    hash = hash * 31 + JodaBeanUtils.hashCode(getNotional());
    hash = hash * 31 + JodaBeanUtils.hashCode(getAccrualFactor());
    hash = hash * 31 + JodaBeanUtils.hashCode(getRate());
    hash = hash * 31 + JodaBeanUtils.hashCode(getRoundingDecimalPlaces());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(192);
    buf.append("ExpandedIborFuture{");
    buf.append("currency").append('=').append(getCurrency()).append(',').append(' ');
    buf.append("notional").append('=').append(getNotional()).append(',').append(' ');
    buf.append("accrualFactor").append('=').append(getAccrualFactor()).append(',').append(' ');
    buf.append("rate").append('=').append(getRate()).append(',').append(' ');
    buf.append("roundingDecimalPlaces").append('=').append(JodaBeanUtils.toString(getRoundingDecimalPlaces()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ExpandedIborFuture}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code currency} property.
     */
    private final MetaProperty<Currency> currency = DirectMetaProperty.ofImmutable(
        this, "currency", ExpandedIborFuture.class, Currency.class);
    /**
     * The meta-property for the {@code notional} property.
     */
    private final MetaProperty<Double> notional = DirectMetaProperty.ofImmutable(
        this, "notional", ExpandedIborFuture.class, Double.TYPE);
    /**
     * The meta-property for the {@code accrualFactor} property.
     */
    private final MetaProperty<Double> accrualFactor = DirectMetaProperty.ofImmutable(
        this, "accrualFactor", ExpandedIborFuture.class, Double.TYPE);
    /**
     * The meta-property for the {@code rate} property.
     */
    private final MetaProperty<IborRateObservation> rate = DirectMetaProperty.ofImmutable(
        this, "rate", ExpandedIborFuture.class, IborRateObservation.class);
    /**
     * The meta-property for the {@code roundingDecimalPlaces} property.
     */
    private final MetaProperty<Integer> roundingDecimalPlaces = DirectMetaProperty.ofImmutable(
        this, "roundingDecimalPlaces", ExpandedIborFuture.class, Integer.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "currency",
        "notional",
        "accrualFactor",
        "rate",
        "roundingDecimalPlaces");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 575402001:  // currency
          return currency;
        case 1585636160:  // notional
          return notional;
        case -1540322338:  // accrualFactor
          return accrualFactor;
        case 3493088:  // rate
          return rate;
        case -1942514743:  // roundingDecimalPlaces
          return roundingDecimalPlaces;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ExpandedIborFuture.Builder builder() {
      return new ExpandedIborFuture.Builder();
    }

    @Override
    public Class<? extends ExpandedIborFuture> beanType() {
      return ExpandedIborFuture.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code currency} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Currency> currency() {
      return currency;
    }

    /**
     * The meta-property for the {@code notional} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> notional() {
      return notional;
    }

    /**
     * The meta-property for the {@code accrualFactor} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> accrualFactor() {
      return accrualFactor;
    }

    /**
     * The meta-property for the {@code rate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<IborRateObservation> rate() {
      return rate;
    }

    /**
     * The meta-property for the {@code roundingDecimalPlaces} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Integer> roundingDecimalPlaces() {
      return roundingDecimalPlaces;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 575402001:  // currency
          return ((ExpandedIborFuture) bean).getCurrency();
        case 1585636160:  // notional
          return ((ExpandedIborFuture) bean).getNotional();
        case -1540322338:  // accrualFactor
          return ((ExpandedIborFuture) bean).getAccrualFactor();
        case 3493088:  // rate
          return ((ExpandedIborFuture) bean).getRate();
        case -1942514743:  // roundingDecimalPlaces
          return ((ExpandedIborFuture) bean).getRoundingDecimalPlaces();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ExpandedIborFuture}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<ExpandedIborFuture> {

    private Currency currency;
    private double notional;
    private double accrualFactor;
    private IborRateObservation rate;
    private int roundingDecimalPlaces;

    /**
     * Restricted constructor.
     */
    private Builder() {
      applyDefaults(this);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ExpandedIborFuture beanToCopy) {
      this.currency = beanToCopy.getCurrency();
      this.notional = beanToCopy.getNotional();
      this.accrualFactor = beanToCopy.getAccrualFactor();
      this.rate = beanToCopy.getRate();
      this.roundingDecimalPlaces = beanToCopy.getRoundingDecimalPlaces();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 575402001:  // currency
          return currency;
        case 1585636160:  // notional
          return notional;
        case -1540322338:  // accrualFactor
          return accrualFactor;
        case 3493088:  // rate
          return rate;
        case -1942514743:  // roundingDecimalPlaces
          return roundingDecimalPlaces;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 575402001:  // currency
          this.currency = (Currency) newValue;
          break;
        case 1585636160:  // notional
          this.notional = (Double) newValue;
          break;
        case -1540322338:  // accrualFactor
          this.accrualFactor = (Double) newValue;
          break;
        case 3493088:  // rate
          this.rate = (IborRateObservation) newValue;
          break;
        case -1942514743:  // roundingDecimalPlaces
          this.roundingDecimalPlaces = (Integer) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ExpandedIborFuture build() {
      preBuild(this);
      return new ExpandedIborFuture(
          currency,
          notional,
          accrualFactor,
          rate,
          roundingDecimalPlaces);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code currency} property in the builder.
     * @param currency  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder currency(Currency currency) {
      JodaBeanUtils.notNull(currency, "currency");
      this.currency = currency;
      return this;
    }

    /**
     * Sets the {@code notional} property in the builder.
     * @param notional  the new value
     * @return this, for chaining, not null
     */
    public Builder notional(double notional) {
      ArgChecker.notNegative(notional, "notional");
      this.notional = notional;
      return this;
    }

    /**
     * Sets the {@code accrualFactor} property in the builder.
     * @param accrualFactor  the new value
     * @return this, for chaining, not null
     */
    public Builder accrualFactor(double accrualFactor) {
      ArgChecker.notNegativeOrZero(accrualFactor, "accrualFactor");
      this.accrualFactor = accrualFactor;
      return this;
    }

    /**
     * Sets the {@code rate} property in the builder.
     * @param rate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder rate(IborRateObservation rate) {
      JodaBeanUtils.notNull(rate, "rate");
      this.rate = rate;
      return this;
    }

    /**
     * Sets the {@code roundingDecimalPlaces} property in the builder.
     * @param roundingDecimalPlaces  the new value
     * @return this, for chaining, not null
     */
    public Builder roundingDecimalPlaces(int roundingDecimalPlaces) {
      ArgChecker.notNegative(roundingDecimalPlaces, "roundingDecimalPlaces");
      this.roundingDecimalPlaces = roundingDecimalPlaces;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(192);
      buf.append("ExpandedIborFuture.Builder{");
      buf.append("currency").append('=').append(JodaBeanUtils.toString(currency)).append(',').append(' ');
      buf.append("notional").append('=').append(JodaBeanUtils.toString(notional)).append(',').append(' ');
      buf.append("accrualFactor").append('=').append(JodaBeanUtils.toString(accrualFactor)).append(',').append(' ');
      buf.append("rate").append('=').append(JodaBeanUtils.toString(rate)).append(',').append(' ');
      buf.append("roundingDecimalPlaces").append('=').append(JodaBeanUtils.toString(roundingDecimalPlaces));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
