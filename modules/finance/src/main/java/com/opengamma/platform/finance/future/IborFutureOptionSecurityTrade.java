package com.opengamma.platform.finance.future;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.DerivedProperty;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableMap;
import com.opengamma.collect.id.Link;
import com.opengamma.collect.id.StandardId;
import com.opengamma.platform.finance.Trade;
import com.opengamma.platform.finance.TradeType;

/**
 * A trade representing a futures contract based on an IBOR-like index.
 * <p>
 * A trade in an {@link IborFutureOptionSecurity}.
 */
@BeanDefinition
public class IborFutureOptionSecurityTrade
    implements Trade, ImmutableBean, Serializable {

  /**
   * The trade type constant for this class - 'IborFutureOption'.
   */
  public static final TradeType TYPE = TradeType.of("IborFutureOption");

  /**
   * The primary standard identifier for the trade.
   * <p>
   * The standard identifier is used to identify the trade.
   * It will typically be an identifier in an external data system.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final StandardId standardId;

  /**
   * The set of additional trade attributes.
   * <p>
   * Most data in the trade is available as bean properties.
   * Attributes are typically used to tag the object with additional information.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final ImmutableMap<String, String> attributes;

  /**
   * The trade date.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final LocalDate tradeDate;

  /**
   * The link referencing the underlying security.
   */
  @PropertyDefinition(validate = "notNull")
  private final Link<IborFutureOptionSecurity> securityLink;

  /**
   * The multiplier, indicating the number of units of the underlying security in the trade.
   * <p>
   * This will be positive if buying and negative if selling.
   */
  @PropertyDefinition
  private final double multiplier;

  /**
   * Initial price of the product. 
   */
  @PropertyDefinition
  private final double initialPrice;

  @Override
  @DerivedProperty
  public TradeType getTradeType() {
    return TYPE;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IborFutureOptionSecurityTrade}.
   * @return the meta-bean, not null
   */
  public static IborFutureOptionSecurityTrade.Meta meta() {
    return IborFutureOptionSecurityTrade.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IborFutureOptionSecurityTrade.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static IborFutureOptionSecurityTrade.Builder builder() {
    return new IborFutureOptionSecurityTrade.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected IborFutureOptionSecurityTrade(IborFutureOptionSecurityTrade.Builder builder) {
    JodaBeanUtils.notNull(builder.standardId, "standardId");
    JodaBeanUtils.notNull(builder.attributes, "attributes");
    JodaBeanUtils.notNull(builder.tradeDate, "tradeDate");
    JodaBeanUtils.notNull(builder.securityLink, "securityLink");
    this.standardId = builder.standardId;
    this.attributes = ImmutableMap.copyOf(builder.attributes);
    this.tradeDate = builder.tradeDate;
    this.securityLink = builder.securityLink;
    this.multiplier = builder.multiplier;
    this.initialPrice = builder.initialPrice;
  }

  @Override
  public IborFutureOptionSecurityTrade.Meta metaBean() {
    return IborFutureOptionSecurityTrade.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the primary standard identifier for the trade.
   * <p>
   * The standard identifier is used to identify the trade.
   * It will typically be an identifier in an external data system.
   * @return the value of the property, not null
   */
  @Override
  public StandardId getStandardId() {
    return standardId;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the set of additional trade attributes.
   * <p>
   * Most data in the trade is available as bean properties.
   * Attributes are typically used to tag the object with additional information.
   * @return the value of the property, not null
   */
  @Override
  public ImmutableMap<String, String> getAttributes() {
    return attributes;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the trade date.
   * @return the value of the property, not null
   */
  @Override
  public LocalDate getTradeDate() {
    return tradeDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the link referencing the underlying security.
   * @return the value of the property, not null
   */
  public Link<IborFutureOptionSecurity> getSecurityLink() {
    return securityLink;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the multiplier, indicating the number of units of the underlying security in the trade.
   * <p>
   * This will be positive if buying and negative if selling.
   * @return the value of the property
   */
  public double getMultiplier() {
    return multiplier;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets initial price of the product.
   * @return the value of the property
   */
  public double getInitialPrice() {
    return initialPrice;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IborFutureOptionSecurityTrade other = (IborFutureOptionSecurityTrade) obj;
      return JodaBeanUtils.equal(getStandardId(), other.getStandardId()) &&
          JodaBeanUtils.equal(getAttributes(), other.getAttributes()) &&
          JodaBeanUtils.equal(getTradeDate(), other.getTradeDate()) &&
          JodaBeanUtils.equal(getSecurityLink(), other.getSecurityLink()) &&
          JodaBeanUtils.equal(getMultiplier(), other.getMultiplier()) &&
          JodaBeanUtils.equal(getInitialPrice(), other.getInitialPrice());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getStandardId());
    hash = hash * 31 + JodaBeanUtils.hashCode(getAttributes());
    hash = hash * 31 + JodaBeanUtils.hashCode(getTradeDate());
    hash = hash * 31 + JodaBeanUtils.hashCode(getSecurityLink());
    hash = hash * 31 + JodaBeanUtils.hashCode(getMultiplier());
    hash = hash * 31 + JodaBeanUtils.hashCode(getInitialPrice());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(256);
    buf.append("IborFutureOptionSecurityTrade{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("standardId").append('=').append(JodaBeanUtils.toString(getStandardId())).append(',').append(' ');
    buf.append("attributes").append('=').append(JodaBeanUtils.toString(getAttributes())).append(',').append(' ');
    buf.append("tradeDate").append('=').append(JodaBeanUtils.toString(getTradeDate())).append(',').append(' ');
    buf.append("securityLink").append('=').append(JodaBeanUtils.toString(getSecurityLink())).append(',').append(' ');
    buf.append("multiplier").append('=').append(JodaBeanUtils.toString(getMultiplier())).append(',').append(' ');
    buf.append("initialPrice").append('=').append(JodaBeanUtils.toString(getInitialPrice())).append(',').append(' ');
    buf.append("tradeType").append('=').append(JodaBeanUtils.toString(getTradeType())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IborFutureOptionSecurityTrade}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code standardId} property.
     */
    private final MetaProperty<StandardId> standardId = DirectMetaProperty.ofImmutable(
        this, "standardId", IborFutureOptionSecurityTrade.class, StandardId.class);
    /**
     * The meta-property for the {@code attributes} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<String, String>> attributes = DirectMetaProperty.ofImmutable(
        this, "attributes", IborFutureOptionSecurityTrade.class, (Class) ImmutableMap.class);
    /**
     * The meta-property for the {@code tradeDate} property.
     */
    private final MetaProperty<LocalDate> tradeDate = DirectMetaProperty.ofImmutable(
        this, "tradeDate", IborFutureOptionSecurityTrade.class, LocalDate.class);
    /**
     * The meta-property for the {@code securityLink} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Link<IborFutureOptionSecurity>> securityLink = DirectMetaProperty.ofImmutable(
        this, "securityLink", IborFutureOptionSecurityTrade.class, (Class) Link.class);
    /**
     * The meta-property for the {@code multiplier} property.
     */
    private final MetaProperty<Double> multiplier = DirectMetaProperty.ofImmutable(
        this, "multiplier", IborFutureOptionSecurityTrade.class, Double.TYPE);
    /**
     * The meta-property for the {@code initialPrice} property.
     */
    private final MetaProperty<Double> initialPrice = DirectMetaProperty.ofImmutable(
        this, "initialPrice", IborFutureOptionSecurityTrade.class, Double.TYPE);
    /**
     * The meta-property for the {@code tradeType} property.
     */
    private final MetaProperty<TradeType> tradeType = DirectMetaProperty.ofDerived(
        this, "tradeType", IborFutureOptionSecurityTrade.class, TradeType.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "standardId",
        "attributes",
        "tradeDate",
        "securityLink",
        "multiplier",
        "initialPrice",
        "tradeType");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1284477768:  // standardId
          return standardId;
        case 405645655:  // attributes
          return attributes;
        case 752419634:  // tradeDate
          return tradeDate;
        case 807992154:  // securityLink
          return securityLink;
        case 1265073601:  // multiplier
          return multiplier;
        case -423406491:  // initialPrice
          return initialPrice;
        case 752919230:  // tradeType
          return tradeType;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public IborFutureOptionSecurityTrade.Builder builder() {
      return new IborFutureOptionSecurityTrade.Builder();
    }

    @Override
    public Class<? extends IborFutureOptionSecurityTrade> beanType() {
      return IborFutureOptionSecurityTrade.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code standardId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<StandardId> standardId() {
      return standardId;
    }

    /**
     * The meta-property for the {@code attributes} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ImmutableMap<String, String>> attributes() {
      return attributes;
    }

    /**
     * The meta-property for the {@code tradeDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> tradeDate() {
      return tradeDate;
    }

    /**
     * The meta-property for the {@code securityLink} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Link<IborFutureOptionSecurity>> securityLink() {
      return securityLink;
    }

    /**
     * The meta-property for the {@code multiplier} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Double> multiplier() {
      return multiplier;
    }

    /**
     * The meta-property for the {@code initialPrice} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Double> initialPrice() {
      return initialPrice;
    }

    /**
     * The meta-property for the {@code tradeType} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<TradeType> tradeType() {
      return tradeType;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1284477768:  // standardId
          return ((IborFutureOptionSecurityTrade) bean).getStandardId();
        case 405645655:  // attributes
          return ((IborFutureOptionSecurityTrade) bean).getAttributes();
        case 752419634:  // tradeDate
          return ((IborFutureOptionSecurityTrade) bean).getTradeDate();
        case 807992154:  // securityLink
          return ((IborFutureOptionSecurityTrade) bean).getSecurityLink();
        case 1265073601:  // multiplier
          return ((IborFutureOptionSecurityTrade) bean).getMultiplier();
        case -423406491:  // initialPrice
          return ((IborFutureOptionSecurityTrade) bean).getInitialPrice();
        case 752919230:  // tradeType
          return ((IborFutureOptionSecurityTrade) bean).getTradeType();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code IborFutureOptionSecurityTrade}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<IborFutureOptionSecurityTrade> {

    private StandardId standardId;
    private Map<String, String> attributes = ImmutableMap.of();
    private LocalDate tradeDate;
    private Link<IborFutureOptionSecurity> securityLink;
    private double multiplier;
    private double initialPrice;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(IborFutureOptionSecurityTrade beanToCopy) {
      this.standardId = beanToCopy.getStandardId();
      this.attributes = beanToCopy.getAttributes();
      this.tradeDate = beanToCopy.getTradeDate();
      this.securityLink = beanToCopy.getSecurityLink();
      this.multiplier = beanToCopy.getMultiplier();
      this.initialPrice = beanToCopy.getInitialPrice();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1284477768:  // standardId
          return standardId;
        case 405645655:  // attributes
          return attributes;
        case 752419634:  // tradeDate
          return tradeDate;
        case 807992154:  // securityLink
          return securityLink;
        case 1265073601:  // multiplier
          return multiplier;
        case -423406491:  // initialPrice
          return initialPrice;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1284477768:  // standardId
          this.standardId = (StandardId) newValue;
          break;
        case 405645655:  // attributes
          this.attributes = (Map<String, String>) newValue;
          break;
        case 752419634:  // tradeDate
          this.tradeDate = (LocalDate) newValue;
          break;
        case 807992154:  // securityLink
          this.securityLink = (Link<IborFutureOptionSecurity>) newValue;
          break;
        case 1265073601:  // multiplier
          this.multiplier = (Double) newValue;
          break;
        case -423406491:  // initialPrice
          this.initialPrice = (Double) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public IborFutureOptionSecurityTrade build() {
      return new IborFutureOptionSecurityTrade(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code standardId} property in the builder.
     * @param standardId  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder standardId(StandardId standardId) {
      JodaBeanUtils.notNull(standardId, "standardId");
      this.standardId = standardId;
      return this;
    }

    /**
     * Sets the {@code attributes} property in the builder.
     * @param attributes  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder attributes(Map<String, String> attributes) {
      JodaBeanUtils.notNull(attributes, "attributes");
      this.attributes = attributes;
      return this;
    }

    /**
     * Sets the {@code tradeDate} property in the builder.
     * @param tradeDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder tradeDate(LocalDate tradeDate) {
      JodaBeanUtils.notNull(tradeDate, "tradeDate");
      this.tradeDate = tradeDate;
      return this;
    }

    /**
     * Sets the {@code securityLink} property in the builder.
     * @param securityLink  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder securityLink(Link<IborFutureOptionSecurity> securityLink) {
      JodaBeanUtils.notNull(securityLink, "securityLink");
      this.securityLink = securityLink;
      return this;
    }

    /**
     * Sets the {@code multiplier} property in the builder.
     * @param multiplier  the new value
     * @return this, for chaining, not null
     */
    public Builder multiplier(double multiplier) {
      this.multiplier = multiplier;
      return this;
    }

    /**
     * Sets the {@code initialPrice} property in the builder.
     * @param initialPrice  the new value
     * @return this, for chaining, not null
     */
    public Builder initialPrice(double initialPrice) {
      this.initialPrice = initialPrice;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(224);
      buf.append("IborFutureOptionSecurityTrade.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("standardId").append('=').append(JodaBeanUtils.toString(standardId)).append(',').append(' ');
      buf.append("attributes").append('=').append(JodaBeanUtils.toString(attributes)).append(',').append(' ');
      buf.append("tradeDate").append('=').append(JodaBeanUtils.toString(tradeDate)).append(',').append(' ');
      buf.append("securityLink").append('=').append(JodaBeanUtils.toString(securityLink)).append(',').append(' ');
      buf.append("multiplier").append('=').append(JodaBeanUtils.toString(multiplier)).append(',').append(' ');
      buf.append("initialPrice").append('=').append(JodaBeanUtils.toString(initialPrice)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
