/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.platform.finance.swap;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.stream.Collectors;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Iterables;
import com.opengamma.basics.currency.Currency;

/**
 * An expanded swap leg consisting of a list of payment periods.
 * <p>
 * This defines a single swap leg in the form of a list of payment periods.
 * Each payment period typically consists of one or more accrual periods.
 * <p>
 * Any combination of payment and accrual periods is supported in the data model,
 * however there is no guarantee that exotic combinations will price sensibly.
 */
@BeanDefinition
public final class ExpandedSwapLeg
    implements SwapLeg, ImmutableBean, Serializable {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The payment periods that combine to form the swap leg.
   * <p>
   * Each payment period may be priced independently.
   */
  @PropertyDefinition(validate = "notEmpty")
  private final ImmutableList<PaymentPeriod> paymentPeriods;
  /**
   * The payment events that form part of the swap leg.
   * <p>
   * Payment events include notional exchange and fees.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableList<PaymentEvent> paymentEvents;

  //-------------------------------------------------------------------------
  /**
   * Gets a payment period by index.
   * <p>
   * This returns a period using a zero-based index.
   * 
   * @param index  the zero-based period index
   * @return the payment period
   * @throws IndexOutOfBoundsException if the index is invalid
   */
  public PaymentPeriod getPaymentPeriod(int index) {
    return paymentPeriods.get(index);
  }

  //-------------------------------------------------------------------------
  /**
   * Gets the start date of the leg.
   * <p>
   * This is the first accrual date in the leg, often known as the effective date.
   * This date has been adjusted to be a valid business day.
   * 
   * @return the start date of the period
   */
  @Override
  public LocalDate getStartDate() {
    return getPaymentPeriod(0).getStartDate();
  }

  /**
   * Gets the end date of the leg.
   * <p>
   * This is the last accrual date in the leg, often known as the maturity date.
   * This date has been adjusted to be a valid business day.
   * 
   * @return the end date of the period
   */
  @Override
  public LocalDate getEndDate() {
    return getPaymentPeriod(paymentPeriods.size() - 1).getEndDate();
  }

  /**
   * Gets the currency of the swap leg.
   * 
   * @return the currency
   * @throws IllegalArgumentException if the payment periods have differing currencies
   */
  @Override
  public Currency getCurrency() {
    return Iterables.getOnlyElement(
        paymentPeriods.stream()
          .map(PaymentPeriod::getCurrency)
          .collect(Collectors.toSet()));
  }

  /**
   * Converts this swap leg to the equivalent expanded swap leg.
   * 
   * @return this
   */
  @Override
  public ExpandedSwapLeg toExpanded() {
    return this;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ExpandedSwapLeg}.
   * @return the meta-bean, not null
   */
  public static ExpandedSwapLeg.Meta meta() {
    return ExpandedSwapLeg.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ExpandedSwapLeg.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ExpandedSwapLeg.Builder builder() {
    return new ExpandedSwapLeg.Builder();
  }

  private ExpandedSwapLeg(
      List<PaymentPeriod> paymentPeriods,
      List<PaymentEvent> paymentEvents) {
    JodaBeanUtils.notEmpty(paymentPeriods, "paymentPeriods");
    JodaBeanUtils.notNull(paymentEvents, "paymentEvents");
    this.paymentPeriods = ImmutableList.copyOf(paymentPeriods);
    this.paymentEvents = ImmutableList.copyOf(paymentEvents);
  }

  @Override
  public ExpandedSwapLeg.Meta metaBean() {
    return ExpandedSwapLeg.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the payment periods that combine to form the swap leg.
   * <p>
   * Each payment period may be priced independently.
   * @return the value of the property, not empty
   */
  public ImmutableList<PaymentPeriod> getPaymentPeriods() {
    return paymentPeriods;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the payment events that form part of the swap leg.
   * <p>
   * Payment events include notional exchange and fees.
   * @return the value of the property, not null
   */
  public ImmutableList<PaymentEvent> getPaymentEvents() {
    return paymentEvents;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ExpandedSwapLeg other = (ExpandedSwapLeg) obj;
      return JodaBeanUtils.equal(getPaymentPeriods(), other.getPaymentPeriods()) &&
          JodaBeanUtils.equal(getPaymentEvents(), other.getPaymentEvents());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getPaymentPeriods());
    hash += hash * 31 + JodaBeanUtils.hashCode(getPaymentEvents());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("ExpandedSwapLeg{");
    buf.append("paymentPeriods").append('=').append(getPaymentPeriods()).append(',').append(' ');
    buf.append("paymentEvents").append('=').append(JodaBeanUtils.toString(getPaymentEvents()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ExpandedSwapLeg}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code paymentPeriods} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<PaymentPeriod>> paymentPeriods = DirectMetaProperty.ofImmutable(
        this, "paymentPeriods", ExpandedSwapLeg.class, (Class) ImmutableList.class);
    /**
     * The meta-property for the {@code paymentEvents} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<PaymentEvent>> paymentEvents = DirectMetaProperty.ofImmutable(
        this, "paymentEvents", ExpandedSwapLeg.class, (Class) ImmutableList.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "paymentPeriods",
        "paymentEvents");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1674414612:  // paymentPeriods
          return paymentPeriods;
        case 1031856831:  // paymentEvents
          return paymentEvents;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ExpandedSwapLeg.Builder builder() {
      return new ExpandedSwapLeg.Builder();
    }

    @Override
    public Class<? extends ExpandedSwapLeg> beanType() {
      return ExpandedSwapLeg.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code paymentPeriods} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<PaymentPeriod>> paymentPeriods() {
      return paymentPeriods;
    }

    /**
     * The meta-property for the {@code paymentEvents} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<PaymentEvent>> paymentEvents() {
      return paymentEvents;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1674414612:  // paymentPeriods
          return ((ExpandedSwapLeg) bean).getPaymentPeriods();
        case 1031856831:  // paymentEvents
          return ((ExpandedSwapLeg) bean).getPaymentEvents();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ExpandedSwapLeg}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<ExpandedSwapLeg> {

    private List<PaymentPeriod> paymentPeriods = new ArrayList<PaymentPeriod>();
    private List<PaymentEvent> paymentEvents = new ArrayList<PaymentEvent>();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ExpandedSwapLeg beanToCopy) {
      this.paymentPeriods = new ArrayList<PaymentPeriod>(beanToCopy.getPaymentPeriods());
      this.paymentEvents = new ArrayList<PaymentEvent>(beanToCopy.getPaymentEvents());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1674414612:  // paymentPeriods
          return paymentPeriods;
        case 1031856831:  // paymentEvents
          return paymentEvents;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1674414612:  // paymentPeriods
          this.paymentPeriods = (List<PaymentPeriod>) newValue;
          break;
        case 1031856831:  // paymentEvents
          this.paymentEvents = (List<PaymentEvent>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ExpandedSwapLeg build() {
      return new ExpandedSwapLeg(
          paymentPeriods,
          paymentEvents);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code paymentPeriods} property in the builder.
     * @param paymentPeriods  the new value, not empty
     * @return this, for chaining, not null
     */
    public Builder paymentPeriods(List<PaymentPeriod> paymentPeriods) {
      JodaBeanUtils.notEmpty(paymentPeriods, "paymentPeriods");
      this.paymentPeriods = paymentPeriods;
      return this;
    }

    /**
     * Sets the {@code paymentEvents} property in the builder.
     * @param paymentEvents  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder paymentEvents(List<PaymentEvent> paymentEvents) {
      JodaBeanUtils.notNull(paymentEvents, "paymentEvents");
      this.paymentEvents = paymentEvents;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("ExpandedSwapLeg.Builder{");
      buf.append("paymentPeriods").append('=').append(JodaBeanUtils.toString(paymentPeriods)).append(',').append(' ');
      buf.append("paymentEvents").append('=').append(JodaBeanUtils.toString(paymentEvents));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
