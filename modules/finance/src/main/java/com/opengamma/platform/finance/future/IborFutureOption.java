package com.opengamma.platform.finance.future;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableValidator;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.collect.ArgChecker;

/**
 * A futures option contract, based on an IBOR-like index, with dates calculated ready for pricing.
 * <p>
 * An Ibor future option is an option on financial instrument that is based on the future value of
 * an IBOR-like interest rate.
 * An Ibor future option is also known as a <i>STIR future option</i>.
 * <p>
 * This class represents the structure of a single option contract, which is typically exchange traded.
 */
@BeanDefinition
public class IborFutureOption implements IborFutureOptionProduct, ImmutableBean, Serializable {

  /**
   * The underlying ibor future.
   */
  @PropertyDefinition(validate = "notNull")
  private final IborFuture iborFuture;

  /**
   * The expiry date of option.  
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate expirationDate;

  /**
   * The strike price of option. 
   * <p>
   * This should be represented in decimal. 
   * Thus strike rate is given by 1.0 - strike
   */
  @PropertyDefinition
  private final double strike;

  /**
   * True for call option, false for put option
   */
  @PropertyDefinition
  private final boolean isCall;

  @ImmutableValidator
  private void validate() {
    ArgChecker.inOrderOrEqual(expirationDate, iborFuture.getLastTradeDate(), "expirationDate", "lastTradeDate");
  }

  //-------------------------------------------------------------------------
  @Override
  public ExpandedIborFutureOption expand() {
    return ExpandedIborFutureOption.builder()
        .expirationDate(expirationDate)
        .strike(strike)
        .isCall(isCall)
        .expandedIborFuture(iborFuture.expand())
        .build();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IborFutureOption}.
   * @return the meta-bean, not null
   */
  public static IborFutureOption.Meta meta() {
    return IborFutureOption.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IborFutureOption.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static IborFutureOption.Builder builder() {
    return new IborFutureOption.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected IborFutureOption(IborFutureOption.Builder builder) {
    JodaBeanUtils.notNull(builder.iborFuture, "iborFuture");
    JodaBeanUtils.notNull(builder.expirationDate, "expirationDate");
    this.iborFuture = builder.iborFuture;
    this.expirationDate = builder.expirationDate;
    this.strike = builder.strike;
    this.isCall = builder.isCall;
    validate();
  }

  @Override
  public IborFutureOption.Meta metaBean() {
    return IborFutureOption.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlying ibor future.
   * @return the value of the property, not null
   */
  public IborFuture getIborFuture() {
    return iborFuture;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the expiry date of option.
   * @return the value of the property, not null
   */
  public LocalDate getExpirationDate() {
    return expirationDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the strike price of option.
   * <p>
   * This should be represented in decimal.
   * Thus strike rate is given by 1.0 - strike
   * @return the value of the property
   */
  public double getStrike() {
    return strike;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets true for call option, false for put option
   * @return the value of the property
   */
  public boolean isIsCall() {
    return isCall;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IborFutureOption other = (IborFutureOption) obj;
      return JodaBeanUtils.equal(getIborFuture(), other.getIborFuture()) &&
          JodaBeanUtils.equal(getExpirationDate(), other.getExpirationDate()) &&
          JodaBeanUtils.equal(getStrike(), other.getStrike()) &&
          (isIsCall() == other.isIsCall());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getIborFuture());
    hash = hash * 31 + JodaBeanUtils.hashCode(getExpirationDate());
    hash = hash * 31 + JodaBeanUtils.hashCode(getStrike());
    hash = hash * 31 + JodaBeanUtils.hashCode(isIsCall());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("IborFutureOption{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("iborFuture").append('=').append(JodaBeanUtils.toString(getIborFuture())).append(',').append(' ');
    buf.append("expirationDate").append('=').append(JodaBeanUtils.toString(getExpirationDate())).append(',').append(' ');
    buf.append("strike").append('=').append(JodaBeanUtils.toString(getStrike())).append(',').append(' ');
    buf.append("isCall").append('=').append(JodaBeanUtils.toString(isIsCall())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IborFutureOption}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code iborFuture} property.
     */
    private final MetaProperty<IborFuture> iborFuture = DirectMetaProperty.ofImmutable(
        this, "iborFuture", IborFutureOption.class, IborFuture.class);
    /**
     * The meta-property for the {@code expirationDate} property.
     */
    private final MetaProperty<LocalDate> expirationDate = DirectMetaProperty.ofImmutable(
        this, "expirationDate", IborFutureOption.class, LocalDate.class);
    /**
     * The meta-property for the {@code strike} property.
     */
    private final MetaProperty<Double> strike = DirectMetaProperty.ofImmutable(
        this, "strike", IborFutureOption.class, Double.TYPE);
    /**
     * The meta-property for the {@code isCall} property.
     */
    private final MetaProperty<Boolean> isCall = DirectMetaProperty.ofImmutable(
        this, "isCall", IborFutureOption.class, Boolean.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "iborFuture",
        "expirationDate",
        "strike",
        "isCall");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 194327967:  // iborFuture
          return iborFuture;
        case -668811523:  // expirationDate
          return expirationDate;
        case -891985998:  // strike
          return strike;
        case -1180608856:  // isCall
          return isCall;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public IborFutureOption.Builder builder() {
      return new IborFutureOption.Builder();
    }

    @Override
    public Class<? extends IborFutureOption> beanType() {
      return IborFutureOption.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code iborFuture} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<IborFuture> iborFuture() {
      return iborFuture;
    }

    /**
     * The meta-property for the {@code expirationDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> expirationDate() {
      return expirationDate;
    }

    /**
     * The meta-property for the {@code strike} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Double> strike() {
      return strike;
    }

    /**
     * The meta-property for the {@code isCall} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Boolean> isCall() {
      return isCall;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 194327967:  // iborFuture
          return ((IborFutureOption) bean).getIborFuture();
        case -668811523:  // expirationDate
          return ((IborFutureOption) bean).getExpirationDate();
        case -891985998:  // strike
          return ((IborFutureOption) bean).getStrike();
        case -1180608856:  // isCall
          return ((IborFutureOption) bean).isIsCall();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code IborFutureOption}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<IborFutureOption> {

    private IborFuture iborFuture;
    private LocalDate expirationDate;
    private double strike;
    private boolean isCall;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(IborFutureOption beanToCopy) {
      this.iborFuture = beanToCopy.getIborFuture();
      this.expirationDate = beanToCopy.getExpirationDate();
      this.strike = beanToCopy.getStrike();
      this.isCall = beanToCopy.isIsCall();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 194327967:  // iborFuture
          return iborFuture;
        case -668811523:  // expirationDate
          return expirationDate;
        case -891985998:  // strike
          return strike;
        case -1180608856:  // isCall
          return isCall;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 194327967:  // iborFuture
          this.iborFuture = (IborFuture) newValue;
          break;
        case -668811523:  // expirationDate
          this.expirationDate = (LocalDate) newValue;
          break;
        case -891985998:  // strike
          this.strike = (Double) newValue;
          break;
        case -1180608856:  // isCall
          this.isCall = (Boolean) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public IborFutureOption build() {
      return new IborFutureOption(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code iborFuture} property in the builder.
     * @param iborFuture  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder iborFuture(IborFuture iborFuture) {
      JodaBeanUtils.notNull(iborFuture, "iborFuture");
      this.iborFuture = iborFuture;
      return this;
    }

    /**
     * Sets the {@code expirationDate} property in the builder.
     * @param expirationDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder expirationDate(LocalDate expirationDate) {
      JodaBeanUtils.notNull(expirationDate, "expirationDate");
      this.expirationDate = expirationDate;
      return this;
    }

    /**
     * Sets the {@code strike} property in the builder.
     * @param strike  the new value
     * @return this, for chaining, not null
     */
    public Builder strike(double strike) {
      this.strike = strike;
      return this;
    }

    /**
     * Sets the {@code isCall} property in the builder.
     * @param isCall  the new value
     * @return this, for chaining, not null
     */
    public Builder isCall(boolean isCall) {
      this.isCall = isCall;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("IborFutureOption.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("iborFuture").append('=').append(JodaBeanUtils.toString(iborFuture)).append(',').append(' ');
      buf.append("expirationDate").append('=').append(JodaBeanUtils.toString(expirationDate)).append(',').append(' ');
      buf.append("strike").append('=').append(JodaBeanUtils.toString(strike)).append(',').append(' ');
      buf.append("isCall").append('=').append(JodaBeanUtils.toString(isCall)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
