/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.platform.finance.rate;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableDefaults;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.opengamma.basics.index.IborIndex;
import com.opengamma.platform.finance.swap.RateAveragingMethod;

/**
 * Defines the calculation of a rate based on the average of multiple fixings of a
 * single IBOR-like floating rate index.
 * <p>
 * An interest rate determined from two IBOR-like indices by linear interpolation.
 * Both indices are observed on the same fixing date.
 * For example, the average of three fixings of 'GBP-LIBOR-3M'.
 */
@BeanDefinition
public final class IborAveragedRate
    implements Rate, ImmutableBean, Serializable {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The IBOR-like index.
   * <p>
   * The rate to be paid is based on this index
   * It will be a well known market rate such as 'GBP-LIBOR-3M'.
   */
  @PropertyDefinition(validate = "notNull")
  private final IborIndex index;
  /**
   * The rate averaging method, defaulted to 'Unweighted'.
   * <p>
   * This is used when more than one fixing contributes to the rate.
   * <p>
   * Averaging may be weighted by the number of days that the fixing is applicable for.
   * The number of days is based on the reset period, not the period between two fixing dates.
   * <p>
   * Defined by the 2006 ISDA definitions article 6.2a.
   */
  @PropertyDefinition(validate = "notNull")
  private final RateAveragingMethod rateAveragingMethod;
  /**
   * The list of reset periods.
   * <p>
   * A fixing will be taken for each reset period, with the final rate
   * being an average of the fixings.
   */
  @PropertyDefinition(validate = "notEmpty")
  private final ImmutableList<ResetPeriod> resetPeriods;

  //-------------------------------------------------------------------------
  @ImmutableDefaults
  private static void applyDefaults(Builder builder) {
    builder.rateAveragingMethod(RateAveragingMethod.UNWEIGHTED);
  }

  //-------------------------------------------------------------------------
  /**
   * Creates an {@code IborAveragedRate} from an index and fixing date.
   * 
   * @param index  the index
   * @param averagingMethod  the rate averaging method
   * @param resetPeriods  the reset periods
   * @return the averaged IBOR rate
   */
  public static IborAveragedRate of(IborIndex index, RateAveragingMethod averagingMethod, ResetPeriod... resetPeriods) {
    return IborAveragedRate.builder()
        .index(index)
        .rateAveragingMethod(averagingMethod)
        .resetPeriods(ImmutableList.copyOf(resetPeriods))
        .build();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IborAveragedRate}.
   * @return the meta-bean, not null
   */
  public static IborAveragedRate.Meta meta() {
    return IborAveragedRate.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IborAveragedRate.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static IborAveragedRate.Builder builder() {
    return new IborAveragedRate.Builder();
  }

  private IborAveragedRate(
      IborIndex index,
      RateAveragingMethod rateAveragingMethod,
      List<ResetPeriod> resetPeriods) {
    JodaBeanUtils.notNull(index, "index");
    JodaBeanUtils.notNull(rateAveragingMethod, "rateAveragingMethod");
    JodaBeanUtils.notEmpty(resetPeriods, "resetPeriods");
    this.index = index;
    this.rateAveragingMethod = rateAveragingMethod;
    this.resetPeriods = ImmutableList.copyOf(resetPeriods);
  }

  @Override
  public IborAveragedRate.Meta metaBean() {
    return IborAveragedRate.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the IBOR-like index.
   * <p>
   * The rate to be paid is based on this index
   * It will be a well known market rate such as 'GBP-LIBOR-3M'.
   * @return the value of the property, not null
   */
  public IborIndex getIndex() {
    return index;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the rate averaging method, defaulted to 'Unweighted'.
   * <p>
   * This is used when more than one fixing contributes to the rate.
   * <p>
   * Averaging may be weighted by the number of days that the fixing is applicable for.
   * The number of days is based on the reset period, not the period between two fixing dates.
   * <p>
   * Defined by the 2006 ISDA definitions article 6.2a.
   * @return the value of the property, not null
   */
  public RateAveragingMethod getRateAveragingMethod() {
    return rateAveragingMethod;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the list of reset periods.
   * <p>
   * A fixing will be taken for each reset period, with the final rate
   * being an average of the fixings.
   * @return the value of the property, not empty
   */
  public ImmutableList<ResetPeriod> getResetPeriods() {
    return resetPeriods;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IborAveragedRate other = (IborAveragedRate) obj;
      return JodaBeanUtils.equal(getIndex(), other.getIndex()) &&
          JodaBeanUtils.equal(getRateAveragingMethod(), other.getRateAveragingMethod()) &&
          JodaBeanUtils.equal(getResetPeriods(), other.getResetPeriods());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getIndex());
    hash += hash * 31 + JodaBeanUtils.hashCode(getRateAveragingMethod());
    hash += hash * 31 + JodaBeanUtils.hashCode(getResetPeriods());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("IborAveragedRate{");
    buf.append("index").append('=').append(getIndex()).append(',').append(' ');
    buf.append("rateAveragingMethod").append('=').append(getRateAveragingMethod()).append(',').append(' ');
    buf.append("resetPeriods").append('=').append(JodaBeanUtils.toString(getResetPeriods()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IborAveragedRate}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code index} property.
     */
    private final MetaProperty<IborIndex> index = DirectMetaProperty.ofImmutable(
        this, "index", IborAveragedRate.class, IborIndex.class);
    /**
     * The meta-property for the {@code rateAveragingMethod} property.
     */
    private final MetaProperty<RateAveragingMethod> rateAveragingMethod = DirectMetaProperty.ofImmutable(
        this, "rateAveragingMethod", IborAveragedRate.class, RateAveragingMethod.class);
    /**
     * The meta-property for the {@code resetPeriods} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<ResetPeriod>> resetPeriods = DirectMetaProperty.ofImmutable(
        this, "resetPeriods", IborAveragedRate.class, (Class) ImmutableList.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "index",
        "rateAveragingMethod",
        "resetPeriods");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          return index;
        case 154998811:  // rateAveragingMethod
          return rateAveragingMethod;
        case -1272973693:  // resetPeriods
          return resetPeriods;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public IborAveragedRate.Builder builder() {
      return new IborAveragedRate.Builder();
    }

    @Override
    public Class<? extends IborAveragedRate> beanType() {
      return IborAveragedRate.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code index} property.
     * @return the meta-property, not null
     */
    public MetaProperty<IborIndex> index() {
      return index;
    }

    /**
     * The meta-property for the {@code rateAveragingMethod} property.
     * @return the meta-property, not null
     */
    public MetaProperty<RateAveragingMethod> rateAveragingMethod() {
      return rateAveragingMethod;
    }

    /**
     * The meta-property for the {@code resetPeriods} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<ResetPeriod>> resetPeriods() {
      return resetPeriods;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          return ((IborAveragedRate) bean).getIndex();
        case 154998811:  // rateAveragingMethod
          return ((IborAveragedRate) bean).getRateAveragingMethod();
        case -1272973693:  // resetPeriods
          return ((IborAveragedRate) bean).getResetPeriods();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code IborAveragedRate}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<IborAveragedRate> {

    private IborIndex index;
    private RateAveragingMethod rateAveragingMethod;
    private List<ResetPeriod> resetPeriods = new ArrayList<ResetPeriod>();

    /**
     * Restricted constructor.
     */
    private Builder() {
      applyDefaults(this);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(IborAveragedRate beanToCopy) {
      this.index = beanToCopy.getIndex();
      this.rateAveragingMethod = beanToCopy.getRateAveragingMethod();
      this.resetPeriods = new ArrayList<ResetPeriod>(beanToCopy.getResetPeriods());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          return index;
        case 154998811:  // rateAveragingMethod
          return rateAveragingMethod;
        case -1272973693:  // resetPeriods
          return resetPeriods;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          this.index = (IborIndex) newValue;
          break;
        case 154998811:  // rateAveragingMethod
          this.rateAveragingMethod = (RateAveragingMethod) newValue;
          break;
        case -1272973693:  // resetPeriods
          this.resetPeriods = (List<ResetPeriod>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public IborAveragedRate build() {
      return new IborAveragedRate(
          index,
          rateAveragingMethod,
          resetPeriods);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code index} property in the builder.
     * @param index  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder index(IborIndex index) {
      JodaBeanUtils.notNull(index, "index");
      this.index = index;
      return this;
    }

    /**
     * Sets the {@code rateAveragingMethod} property in the builder.
     * @param rateAveragingMethod  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder rateAveragingMethod(RateAveragingMethod rateAveragingMethod) {
      JodaBeanUtils.notNull(rateAveragingMethod, "rateAveragingMethod");
      this.rateAveragingMethod = rateAveragingMethod;
      return this;
    }

    /**
     * Sets the {@code resetPeriods} property in the builder.
     * @param resetPeriods  the new value, not empty
     * @return this, for chaining, not null
     */
    public Builder resetPeriods(List<ResetPeriod> resetPeriods) {
      JodaBeanUtils.notEmpty(resetPeriods, "resetPeriods");
      this.resetPeriods = resetPeriods;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("IborAveragedRate.Builder{");
      buf.append("index").append('=').append(JodaBeanUtils.toString(index)).append(',').append(' ');
      buf.append("rateAveragingMethod").append('=').append(JodaBeanUtils.toString(rateAveragingMethod)).append(',').append(' ');
      buf.append("resetPeriods").append('=').append(JodaBeanUtils.toString(resetPeriods));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
