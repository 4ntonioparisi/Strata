/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.market.curve;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.value.ValueAdjustment;

/**
 * A curve with a parallel shift applied to its Y values.
 * <p>
 * This class decorates another curve and applies an adjustment to the Y values when they are queried.
 * The shift is either absolute or relative.
 * <p>
 * When the shift is absolute the shift amount is added to the Y value.
 * <p>
 * When the shift is relative the Y value is scaled by the shift amount. The shift amount is interpreted
 * as a percentage. For example, a shift amount of 0.1 is a shift of +10% which multiplies the value by 1.1.
 * A shift amount of -0.2 is a shift of -20% which multiplies the value by 0.8
 */
@BeanDefinition
public final class ParallelShiftedCurve implements Curve, ImmutableBean {

  /** The underlying curve. */
  @PropertyDefinition(validate = "notNull")
  private final Curve curve;

  /** The adjustment applied to Y values when looking up points on the curve. */
  @PropertyDefinition(validate = "notNull")
  private final ValueAdjustment adjustment;

  /**
   * Returns a curve based on an underlying curve with a fixed amount added to the Y values.
   *
   * @param curve  the underlying curve
   * @param shiftAmount  the amount added to the Y values of the curve
   * @return a curve based on an underlying curve with a fixed amount added to the Y values.
   */
  public static Curve absolute(Curve curve, double shiftAmount) {
    return new ParallelShiftedCurve(curve, ValueAdjustment.ofDeltaAmount(shiftAmount));
  }

  /**
   * Returns a curve based on an underlying curve with a scaling applied to the Y values.
   * <p>
   * The shift amount is interpreted as a percentage. For example, a shift amount of 0.1 is a
   * shift of +10% which multiplies the value by 1.1. A shift amount of -0.2 is a shift of -20%
   * which multiplies the value by 0.8
   *
   * @param curve  the underlying curve
   * @param shiftAmount  the percentage by which the Y values are scaled
   * @return a curve based on an underlying curve with a scaling applied to the Y values.
   */
  public static Curve relative(Curve curve, double shiftAmount) {
    return new ParallelShiftedCurve(curve, ValueAdjustment.ofMultiplier(1 + shiftAmount));
  }

  @Override
  public CurveMetadata getMetadata() {
    return curve.getMetadata();
  }

  @Override
  public CurveName getName() {
    return curve.getName();
  }

  @Override
  public int getParameterCount() {
    return curve.getParameterCount();
  }

  @Override
  public double yValue(double x) {
    return adjustment.adjust(curve.yValue(x));
  }

  @Override
  public double[] yValueParameterSensitivity(double x) {
    // TODO Confirm this is the correct behaviour for sensitivities on shifted curves
    throw new UnsupportedOperationException("yValueParameterSensitivity not supported for shifted curves");
  }

  @Override
  public double firstDerivative(double x) {
    return curve.firstDerivative(x);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ParallelShiftedCurve}.
   * @return the meta-bean, not null
   */
  public static ParallelShiftedCurve.Meta meta() {
    return ParallelShiftedCurve.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ParallelShiftedCurve.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ParallelShiftedCurve.Builder builder() {
    return new ParallelShiftedCurve.Builder();
  }

  private ParallelShiftedCurve(
      Curve curve,
      ValueAdjustment adjustment) {
    JodaBeanUtils.notNull(curve, "curve");
    JodaBeanUtils.notNull(adjustment, "adjustment");
    this.curve = curve;
    this.adjustment = adjustment;
  }

  @Override
  public ParallelShiftedCurve.Meta metaBean() {
    return ParallelShiftedCurve.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlying curve.
   * @return the value of the property, not null
   */
  public Curve getCurve() {
    return curve;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the adjustment applied to Y values when looking up points on the curve.
   * @return the value of the property, not null
   */
  public ValueAdjustment getAdjustment() {
    return adjustment;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ParallelShiftedCurve other = (ParallelShiftedCurve) obj;
      return JodaBeanUtils.equal(getCurve(), other.getCurve()) &&
          JodaBeanUtils.equal(getAdjustment(), other.getAdjustment());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getCurve());
    hash = hash * 31 + JodaBeanUtils.hashCode(getAdjustment());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("ParallelShiftedCurve{");
    buf.append("curve").append('=').append(getCurve()).append(',').append(' ');
    buf.append("adjustment").append('=').append(JodaBeanUtils.toString(getAdjustment()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ParallelShiftedCurve}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code curve} property.
     */
    private final MetaProperty<Curve> curve = DirectMetaProperty.ofImmutable(
        this, "curve", ParallelShiftedCurve.class, Curve.class);
    /**
     * The meta-property for the {@code adjustment} property.
     */
    private final MetaProperty<ValueAdjustment> adjustment = DirectMetaProperty.ofImmutable(
        this, "adjustment", ParallelShiftedCurve.class, ValueAdjustment.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "curve",
        "adjustment");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 95027439:  // curve
          return curve;
        case 1977085293:  // adjustment
          return adjustment;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ParallelShiftedCurve.Builder builder() {
      return new ParallelShiftedCurve.Builder();
    }

    @Override
    public Class<? extends ParallelShiftedCurve> beanType() {
      return ParallelShiftedCurve.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code curve} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Curve> curve() {
      return curve;
    }

    /**
     * The meta-property for the {@code adjustment} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ValueAdjustment> adjustment() {
      return adjustment;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 95027439:  // curve
          return ((ParallelShiftedCurve) bean).getCurve();
        case 1977085293:  // adjustment
          return ((ParallelShiftedCurve) bean).getAdjustment();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ParallelShiftedCurve}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<ParallelShiftedCurve> {

    private Curve curve;
    private ValueAdjustment adjustment;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ParallelShiftedCurve beanToCopy) {
      this.curve = beanToCopy.getCurve();
      this.adjustment = beanToCopy.getAdjustment();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 95027439:  // curve
          return curve;
        case 1977085293:  // adjustment
          return adjustment;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 95027439:  // curve
          this.curve = (Curve) newValue;
          break;
        case 1977085293:  // adjustment
          this.adjustment = (ValueAdjustment) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ParallelShiftedCurve build() {
      return new ParallelShiftedCurve(
          curve,
          adjustment);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code curve} property in the builder.
     * @param curve  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder curve(Curve curve) {
      JodaBeanUtils.notNull(curve, "curve");
      this.curve = curve;
      return this;
    }

    /**
     * Sets the {@code adjustment} property in the builder.
     * @param adjustment  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder adjustment(ValueAdjustment adjustment) {
      JodaBeanUtils.notNull(adjustment, "adjustment");
      this.adjustment = adjustment;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("ParallelShiftedCurve.Builder{");
      buf.append("curve").append('=').append(JodaBeanUtils.toString(curve)).append(',').append(' ');
      buf.append("adjustment").append('=').append(JodaBeanUtils.toString(adjustment));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
