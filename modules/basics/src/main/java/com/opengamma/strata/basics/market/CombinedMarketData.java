/**
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.basics.market;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Optional;
import java.util.Set;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableValidator;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.light.LightMetaBean;

import com.opengamma.strata.collect.timeseries.LocalDateDoubleTimeSeries;

/**
 * A set of market data which combines the data from two other {@link MarketData} instances.
 * <p>
 * When an item of data is requested the underlying sets of market data are checked in order.
 * If the item is present in the first set of data it is returned. If the item is not found
 * it is looked up in the second set of data.
 */
@BeanDefinition(style = "light", constructorScope = "package")
final class CombinedMarketData
    implements MarketData, ImmutableBean, Serializable {

  /**
   * The first set of market data.
   */
  @PropertyDefinition(validate = "notNull")
  private final MarketData marketData1;
  /**
   * The second set of market data.
   */
  @PropertyDefinition(validate = "notNull")
  private final MarketData marketData2;

  //-------------------------------------------------------------------------
  @ImmutableValidator
  private void validate() {
    if (!marketData1.getValuationDate().equals(marketData2.getValuationDate())) {
      throw new IllegalArgumentException("Unable to combine market data instances with different valuation dates");
    }
  }

  //-------------------------------------------------------------------------
  @Override
  public LocalDate getValuationDate() {
    return marketData1.getValuationDate();
  }

  @Override
  public boolean containsValue(MarketDataKey<?> key) {
    return marketData1.containsValue(key) || marketData2.containsValue(key);
  }

  @Override
  public <T> T getValue(MarketDataKey<T> key) {
    Optional<T> value1 = marketData1.findValue(key);
    return value1.isPresent() ? value1.get() : marketData2.getValue(key);
  }

  @Override
  public <T> Optional<T> findValue(MarketDataKey<T> key) {
    Optional<T> value1 = marketData1.findValue(key);
    return value1.isPresent() ? value1 : marketData2.findValue(key);
  }

  @Override
  public LocalDateDoubleTimeSeries getTimeSeries(ObservableKey key) {
    LocalDateDoubleTimeSeries value1 = marketData1.getTimeSeries(key);
    LocalDateDoubleTimeSeries value2 = marketData2.getTimeSeries(key);
    return !value1.isEmpty() ? value1 : value2;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CombinedMarketData}.
   */
  private static MetaBean META_BEAN = LightMetaBean.of(CombinedMarketData.class);

  /**
   * The meta-bean for {@code CombinedMarketData}.
   * @return the meta-bean, not null
   */
  public static MetaBean meta() {
    return META_BEAN;
  }

  static {
    JodaBeanUtils.registerMetaBean(META_BEAN);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Creates an instance.
   * @param marketData1  the value of the property, not null
   * @param marketData2  the value of the property, not null
   */
  CombinedMarketData(
      MarketData marketData1,
      MarketData marketData2) {
    JodaBeanUtils.notNull(marketData1, "marketData1");
    JodaBeanUtils.notNull(marketData2, "marketData2");
    this.marketData1 = marketData1;
    this.marketData2 = marketData2;
    validate();
  }

  @Override
  public MetaBean metaBean() {
    return META_BEAN;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the first set of market data.
   * @return the value of the property, not null
   */
  public MarketData getMarketData1() {
    return marketData1;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the second set of market data.
   * @return the value of the property, not null
   */
  public MarketData getMarketData2() {
    return marketData2;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CombinedMarketData other = (CombinedMarketData) obj;
      return JodaBeanUtils.equal(marketData1, other.marketData1) &&
          JodaBeanUtils.equal(marketData2, other.marketData2);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(marketData1);
    hash = hash * 31 + JodaBeanUtils.hashCode(marketData2);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("CombinedMarketData{");
    buf.append("marketData1").append('=').append(marketData1).append(',').append(' ');
    buf.append("marketData2").append('=').append(JodaBeanUtils.toString(marketData2));
    buf.append('}');
    return buf.toString();
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
