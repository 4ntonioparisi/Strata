/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.basics.exchange;

import java.io.Serializable;
import java.time.ZoneId;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.basics.location.Country;

/**
 * A financial exchange, providing a marketplace for trading financial instruments.
 * <p>
 * Many financial products are traded on a specific exchange.
 * Implementations of this interface define these exchanges.
 * <p>
 * The most common implementations are provided in {@link Exchanges}.
 * <p>
 * All implementations of this interface must be immutable and thread-safe.
 */
@BeanDefinition
public final class ImmutableExchange
    implements Exchange, ImmutableBean, Serializable {

  /**
   * Serialization version.
   */
  private static final long serialVersionUID = 1;

  /**
   * The exchange name, such as 'XLON'.
   */
  @PropertyDefinition(validate = "notEmpty", overrideGet = true)
  private final String name;
  /**
   * The country of the exchange.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final Country country;
  /**
   * The time-zone of the exchange.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final ZoneId timeZone;

  //-------------------------------------------------------------------------
  /**
   * Returns the name of the index.
   * 
   * @return the name of the index
   */
  @Override
  public String toString() {
    return getName();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ImmutableExchange}.
   * @return the meta-bean, not null
   */
  public static ImmutableExchange.Meta meta() {
    return ImmutableExchange.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ImmutableExchange.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ImmutableExchange.Builder builder() {
    return new ImmutableExchange.Builder();
  }

  private ImmutableExchange(
      String name,
      Country country,
      ZoneId timeZone) {
    JodaBeanUtils.notEmpty(name, "name");
    JodaBeanUtils.notNull(country, "country");
    JodaBeanUtils.notNull(timeZone, "timeZone");
    this.name = name;
    this.country = country;
    this.timeZone = timeZone;
  }

  @Override
  public ImmutableExchange.Meta metaBean() {
    return ImmutableExchange.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the exchange name, such as 'XLON'.
   * @return the value of the property, not empty
   */
  @Override
  public String getName() {
    return name;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the country of the exchange.
   * @return the value of the property, not null
   */
  @Override
  public Country getCountry() {
    return country;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the time-zone of the exchange.
   * @return the value of the property, not null
   */
  @Override
  public ZoneId getTimeZone() {
    return timeZone;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ImmutableExchange other = (ImmutableExchange) obj;
      return JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getCountry(), other.getCountry()) &&
          JodaBeanUtils.equal(getTimeZone(), other.getTimeZone());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCountry());
    hash += hash * 31 + JodaBeanUtils.hashCode(getTimeZone());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ImmutableExchange}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> name = DirectMetaProperty.ofImmutable(
        this, "name", ImmutableExchange.class, String.class);
    /**
     * The meta-property for the {@code country} property.
     */
    private final MetaProperty<Country> country = DirectMetaProperty.ofImmutable(
        this, "country", ImmutableExchange.class, Country.class);
    /**
     * The meta-property for the {@code timeZone} property.
     */
    private final MetaProperty<ZoneId> timeZone = DirectMetaProperty.ofImmutable(
        this, "timeZone", ImmutableExchange.class, ZoneId.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "name",
        "country",
        "timeZone");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return name;
        case 957831062:  // country
          return country;
        case -2077180903:  // timeZone
          return timeZone;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ImmutableExchange.Builder builder() {
      return new ImmutableExchange.Builder();
    }

    @Override
    public Class<? extends ImmutableExchange> beanType() {
      return ImmutableExchange.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> name() {
      return name;
    }

    /**
     * The meta-property for the {@code country} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Country> country() {
      return country;
    }

    /**
     * The meta-property for the {@code timeZone} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ZoneId> timeZone() {
      return timeZone;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return ((ImmutableExchange) bean).getName();
        case 957831062:  // country
          return ((ImmutableExchange) bean).getCountry();
        case -2077180903:  // timeZone
          return ((ImmutableExchange) bean).getTimeZone();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ImmutableExchange}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<ImmutableExchange> {

    private String name;
    private Country country;
    private ZoneId timeZone;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ImmutableExchange beanToCopy) {
      this.name = beanToCopy.getName();
      this.country = beanToCopy.getCountry();
      this.timeZone = beanToCopy.getTimeZone();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return name;
        case 957831062:  // country
          return country;
        case -2077180903:  // timeZone
          return timeZone;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          this.name = (String) newValue;
          break;
        case 957831062:  // country
          this.country = (Country) newValue;
          break;
        case -2077180903:  // timeZone
          this.timeZone = (ZoneId) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ImmutableExchange build() {
      return new ImmutableExchange(
          name,
          country,
          timeZone);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code name} property in the builder.
     * @param name  the new value, not empty
     * @return this, for chaining, not null
     */
    public Builder name(String name) {
      JodaBeanUtils.notEmpty(name, "name");
      this.name = name;
      return this;
    }

    /**
     * Sets the {@code country} property in the builder.
     * @param country  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder country(Country country) {
      JodaBeanUtils.notNull(country, "country");
      this.country = country;
      return this;
    }

    /**
     * Sets the {@code timeZone} property in the builder.
     * @param timeZone  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder timeZone(ZoneId timeZone) {
      JodaBeanUtils.notNull(timeZone, "timeZone");
      this.timeZone = timeZone;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("ImmutableExchange.Builder{");
      buf.append("name").append('=').append(JodaBeanUtils.toString(name)).append(',').append(' ');
      buf.append("country").append('=').append(JodaBeanUtils.toString(country)).append(',').append(' ');
      buf.append("timeZone").append('=').append(JodaBeanUtils.toString(timeZone));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
